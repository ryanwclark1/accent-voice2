File: __init__.py
Please review for update

# Copyright 2023 Accent Communications

from accent_deployd_client.client import DeploydClient as Client

__all__ = [
    'Client',
]

----------------------------------------

File: client.py
Please review for update

# Copyright 2023 Accent Communications

from accent_lib_rest_client.client import BaseClient


class DeploydClient(BaseClient):
    namespace = 'accent_deployd_client.commands'

    def __init__(self, host, port=443, prefix='/api/deployd', version='0.1', **kwargs):
        super().__init__(
            host=host,
            port=port,
            prefix=prefix,
            version=version,
            **kwargs,
        )

----------------------------------------

File: command.py
Please review for update

# Copyright 2023 Accent Communications

from accent_lib_rest_client.command import RESTCommand

from .exceptions import DeploydError, DeploydServiceUnavailable, InvalidDeploydError


class DeploydCommand(RESTCommand):
    @staticmethod
    def raise_from_response(response):
        if response.status_code == 503:
            raise DeploydServiceUnavailable(response)

        try:
            raise DeploydError(response)
        except InvalidDeploydError:
            RESTCommand.raise_from_response(response)

----------------------------------------

File: commands/__init__.py
Please review for update


----------------------------------------

File: commands/config.py
Please review for update

# Copyright 2023 Accent Communications

from accent_deployd_client.command import DeploydCommand


class ConfigCommand(DeploydCommand):
    resource = 'config'

    def get(self):
        headers = self._get_headers()
        r = self.session.get(self.base_url, headers=headers)
        self.raise_from_response(r)
        return r.json()

----------------------------------------

File: commands/instances.py
Please review for update

# Copyright 2023 Accent Communications

from accent_deployd_client.command import DeploydCommand


class InstancesCommand(DeploydCommand):
    resource = 'instances'

    def __init__(self, client):
        super().__init__(client)

    def list(self, provider_uuid=None, **params):
        headers = self._get_headers(**params)
        if provider_uuid:
            url = self._provider_instances_all_url(provider_uuid)
        else:
            url = self._instances_all_url()

        response = self.session.get(url, headers=headers, params=params)
        if response.status_code != 200:
            self.raise_from_response(response)

        return response.json()

    def _create_instance(self, url, instance_data, tenant_uuid):
        headers = self._get_headers(tenant_uuid=tenant_uuid)
        response = self.session.post(url, json=instance_data, headers=headers)
        if response.status_code != 201:
            self.raise_from_response(response)

        return response.json()

    def register(self, instance_data, tenant_uuid=None):
        url = self._instances_all_url()
        return self._create_instance(url, instance_data, tenant_uuid)

    def create(self, provider_uuid, instance_data, tenant_uuid=None):
        url = self._provider_instances_all_url(provider_uuid)
        return self._create_instance(url, instance_data, tenant_uuid)

    def get(self, instance_uuid, tenant_uuid=None):
        url = self._instances_one_url(instance_uuid)
        headers = self._get_headers(tenant_uuid=tenant_uuid)

        response = self.session.get(url, headers=headers)
        if response.status_code != 200:
            self.raise_from_response(response)

        return response.json()

    def get_accent(self, instance_uuid, tenant_uuid=None):
        headers = self._get_headers(tenant_uuid=tenant_uuid)
        url = self._instances_accent_url(instance_uuid)

        response = self.session.get(url, headers=headers)
        if response.status_code != 200:
            self.raise_from_response(response)

        return response.json()

    def update(self, instance_uuid, instance_data, tenant_uuid=None):
        url = self._instances_one_url(instance_uuid)
        headers = self._get_headers(tenant_uuid=tenant_uuid)

        response = self.session.put(url, json=instance_data, headers=headers)
        if response.status_code != 200:
            self.raise_from_response(response)

        return response.json()

    def _delete_instance(self, url, tenant_uuid):
        headers = self._get_headers(tenant_uuid=tenant_uuid)
        response = self.session.delete(url, headers=headers)
        if response.status_code != 204:
            self.raise_from_response(response)

    def unregister(self, instance_uuid, tenant_uuid=None):
        url = self._instances_one_url(instance_uuid)
        return self._delete_instance(url, tenant_uuid)

    def delete(self, provider_uuid, instance_uuid, tenant_uuid=None):
        url = self._provider_instances_one_url(
            instance_uuid,
            provider_uuid,
        )
        return self._delete_instance(url, tenant_uuid)

    def get_credential(self, instance_uuid, credential_uuid, tenant_uuid=None):
        headers = self._get_headers(tenant_uuid=tenant_uuid)
        url = self._credentials_one_url(instance_uuid, credential_uuid)
        response = self.session.get(url, headers=headers)
        if response.status_code != 200:
            self.raise_from_response(response)
        return response.json()

    def create_credential(self, instance_uuid, credential_data, tenant_uuid=None):
        headers = self._get_headers(tenant_uuid=tenant_uuid)
        url = self._credentials_all_url(instance_uuid)
        response = self.session.post(url, json=credential_data, headers=headers)
        if response.status_code != 201:
            self.raise_from_response(response)
        return response.json()

    def update_credential(
        self, instance_uuid, credential_uuid, credential_data, tenant_uuid=None
    ):
        headers = self._get_headers(tenant_uuid=tenant_uuid)
        url = self._credentials_one_url(instance_uuid, credential_uuid)
        response = self.session.put(url, json=credential_data, headers=headers)
        if response.status_code != 200:
            self.raise_from_response(response)
        return response.json()

    def delete_credential(self, instance_uuid, credential_uuid, tenant_uuid=None):
        headers = self._get_headers(tenant_uuid=tenant_uuid)
        url = self._credentials_one_url(instance_uuid, credential_uuid)
        response = self.session.delete(url, headers=headers)
        if response.status_code != 204:
            self.raise_from_response(response)

    def _instances_all_url(self):
        return self.base_url

    def _instances_one_url(self, instance_uuid):
        return '{base_url}/{instance_uuid}'.format(
            base_url=self._instances_all_url(),
            instance_uuid=instance_uuid,
        )

    def _instances_accent_url(self, instance_uuid):
        return '{base_url}/accent'.format(
            base_url=self._instances_one_url(instance_uuid),
        )

    def _credentials_one_url(self, instance_uuid, credential_uuid):
        return '{base_url}/{instance_uuid}/credentials/{credential_uuid}'.format(
            base_url=self._instances_all_url(),
            instance_uuid=instance_uuid,
            credential_uuid=credential_uuid,
        )

    def _credentials_all_url(self, instance_uuid):
        return '{base_url}/{instance_uuid}/credentials'.format(
            base_url=self._instances_all_url(),
            instance_uuid=instance_uuid,
        )

    def _provider_instances_all_url(self, provider_uuid):
        return self._client.url('providers', provider_uuid, 'instances')

    def _provider_instances_one_url(self, instance_uuid, provider_uuid):
        return '{base_url}/{instance_uuid}'.format(
            base_url=self._provider_instances_all_url(provider_uuid),
            instance_uuid=instance_uuid,
        )

----------------------------------------

File: commands/providers.py
Please review for update

# Copyright 2023 Accent Communications

from accent_deployd_client.command import DeploydCommand


class PlatformsSubcommand(DeploydCommand):
    resource = 'platforms'

    def __init__(self, client, base_url):
        super().__init__(client)
        self.base_url = base_url

    def list(self):
        headers = self._get_headers()
        url = self._providers_platforms_url()
        response = self.session.get(url, headers=headers)
        if response.status_code != 200:
            self.raise_from_response(response)

        return response.json()

    def _providers_platforms_url(self):
        return '{base_url}/platforms'.format(
            base_url=self.base_url,
        )


class ProvidersCommand(DeploydCommand):
    resource = 'providers'

    def __init__(self, client):
        super().__init__(client)
        self.platforms = PlatformsSubcommand(
            client,
            self.base_url,
        )

    def list(self, **params):
        url = self._providers_all_url()
        headers = self._get_headers(**params)

        response = self.session.get(url, headers=headers, params=params)
        if response.status_code != 200:
            self.raise_from_response(response)

        return response.json()

    def create(self, provider_data, tenant_uuid=None):
        url = self._providers_all_url()
        headers = self._get_headers(tenant_uuid=tenant_uuid)

        response = self.session.post(url, json=provider_data, headers=headers)
        if response.status_code != 201:
            self.raise_from_response(response)

        return response.json()

    def get(self, provider_uuid, tenant_uuid=None):
        headers = self._get_headers(tenant_uuid=tenant_uuid)
        url = self._providers_one_url(provider_uuid)

        response = self.session.get(url, headers=headers)
        if response.status_code != 200:
            self.raise_from_response(response)

        return response.json()

    def update(self, provider_uuid, provider_data, tenant_uuid=None):
        url = self._providers_one_url(provider_uuid)
        headers = self._get_headers(tenant_uuid=tenant_uuid)

        response = self.session.put(url, json=provider_data, headers=headers)
        if response.status_code != 200:
            self.raise_from_response(response)

        return response.json()

    def delete(self, provider_uuid, tenant_uuid=None):
        headers = self._get_headers(tenant_uuid=tenant_uuid)
        url = self._providers_one_url(provider_uuid)

        response = self.session.delete(url, headers=headers)
        if response.status_code != 204:
            self.raise_from_response(response)

    def list_images(self, provider_uuid, **params):
        return self._providers_resources('images', provider_uuid, **params)

    def list_locations(self, provider_uuid, **params):
        return self._providers_resources('locations', provider_uuid, **params)

    def list_key_pairs(self, provider_uuid, **params):
        return self._providers_resources('keypairs', provider_uuid, **params)

    def list_networks(self, provider_uuid, **params):
        return self._providers_resources('networks', provider_uuid, **params)

    def list_sizes(self, provider_uuid, **params):
        return self._providers_resources('sizes', provider_uuid, **params)

    def list_subnets(self, provider_uuid, **params):
        return self._providers_resources('subnets', provider_uuid, **params)

    def list_regions(self, provider_uuid, **params):
        return self._providers_resources('regions', provider_uuid, **params)

    def _providers_all_url(self):
        return self.base_url

    def _providers_one_url(self, provider_uuid):
        return '{base_url}/{provider_uuid}'.format(
            base_url=self._providers_all_url(),
            provider_uuid=provider_uuid,
        )

    def _providers_resources(self, endpoint, provider_uuid, tenant_uuid=None, **params):
        headers = self._get_headers(tenant_uuid=tenant_uuid)
        url = '{base_url}/{endpoint}'.format(
            base_url=self._providers_one_url(provider_uuid), endpoint=endpoint
        )

        response = self.session.get(url, headers=headers, params=params)
        if response.status_code != 200:
            self.raise_from_response(response)

        return response.json()
----------------------------------------

File: commands/status.py
Please review for update

# Copyright 2023 Accent Communications

from accent_deployd_client.command import DeploydCommand


class StatusCommand(DeploydCommand):
    resource = 'status'

    def check(self):
        headers = self._get_headers()
        r = self.session.head(self.base_url, headers=headers)
        if r.status_code != 200:
            self.raise_from_response(r)

----------------------------------------

File: exceptions.py
Please review for update

# Copyright 2023 Accent Communications

from requests import HTTPError


class DeploydError(HTTPError):
    def __init__(self, response):
        try:
            body = response.json()
        except ValueError:
            raise InvalidDeploydError()

        self.status_code = response.status_code
        try:
            self.message = body['message']
            self.error_id = body['error_id']
            self.details = body['details']
            self.timestamp = body['timestamp']
            if body.get('resource', None):
                self.resource = body['resource']
        except KeyError:
            raise InvalidDeploydError()

        exception_message = f'{self.message}: {self.details}'
        super().__init__(exception_message, response=response)


class DeploydServiceUnavailable(DeploydError):
    pass


class InvalidDeploydError(Exception):
    pass

----------------------------------------

