File: tests/__init__.py
Please review for update


----------------------------------------

File: tests/server/run.py
Please review for update

# Copyright 2023 Accent Communications

from __future__ import annotations

import os
from datetime import timedelta

from flask import Flask, Response, send_from_directory
from flask_httpauth import HTTPDigestAuth

ROOT = os.path.dirname(os.path.realpath(__file__))

USERS = {'username': 'password'}

app = Flask(__name__)
app.secret_key = os.urandom(24)
app.permanent_session_lifetime = timedelta(seconds=1)

auth = HTTPDigestAuth()


@auth.get_password
def get_password(username: str) -> str | None:
    return USERS.get(username)


@app.route('/auth/<path:path>')  # type: ignore[no-redef]
@auth.login_required
def auth(path: str) -> Response:
    return send_from_directory(ROOT, path)


@app.route('/<path:path>')
def root(path: str) -> Response:
    print(path)
    return send_from_directory(ROOT, path)


if __name__ == "__main__":
    app.run(port=8000)

----------------------------------------

File: tests/command.py
Please review for update

# Copyright 2023 Accent Communications

from __future__ import annotations

from unittest import TestCase
from unittest.mock import Mock, sentinel

from requests.exceptions import HTTPError

from accent_lib_rest_client import RESTCommand


class HTTPCommandTestCase(TestCase):
    Command: type[RESTCommand]

    def setUp(self) -> None:
        base_url = self.Command.resource
        self.client = Mock()
        self.client.timeout = sentinel.timeout
        self.client.tenant = Mock(return_value=None)
        self.client.url = Mock(return_value=base_url)
        self.session = self.client.session.return_value
        self.session.headers = {}
        self.command = self.Command(self.client)

    def assertRaisesHTTPError(self, function, *args, **kwargs):
        self.assertRaises(HTTPError, function, *args, **kwargs)

    @staticmethod
    def new_response(status_code, json=None, body=None):
        response = Mock()
        response.status_code = status_code
        if status_code >= 300:
            response.raise_for_status.side_effect = HTTPError()
        if json is not None:
            response.json.return_value = json
        elif body is not None:
            response.text = body
            response.content = body
        else:
            response.json.side_effect = ValueError()
        return response

    def set_response(self, action, status_code, body=None):
        mock_action = getattr(self.session, action)
        mock_action.return_value = self.new_response(status_code, json=body)
        return body

    def assert_request_sent(self, action, url, **kwargs):
        mock_action = getattr(self.session, action)
        mock_action.assert_called_once_with(url, **kwargs)


class RESTCommandTestCase(HTTPCommandTestCase):

    scheme = 'http'
    host = 'accentvoice.io'
    port = 9486
    version = '1.0'

    def setUp(self) -> None:
        super().setUp()
        self.base_url = self.command.base_url

----------------------------------------

File: tests/test_client.py
Please review for update

# Copyright 2023 Accent Communications

from __future__ import annotations

import os
import subprocess
import time
import unittest
from unittest.mock import ANY, Mock, patch

import requests
from hamcrest import (
    assert_that,
    close_to,
    contains_string,
    ends_with,
    equal_to,
    has_entry,
    is_,
)
from requests import Session
from requests.exceptions import HTTPError, RequestException, Timeout

from ..client import BaseClient, logger
from ..example_cmd import ExampleCommand


class Client(BaseClient):

    namespace = 'test_rest_client.commands'
    example: ExampleCommand

    def __init__(
        self,
        host='localhost',
        port=1234,
        version='1.1',
        username=None,
        password=None,
        https=False,
        verify_certificate=False,
        **kwargs,
    ):
        super().__init__(
            host=host,
            port=port,
            version=version,
            https=https,
            verify_certificate=verify_certificate,
            **kwargs,
        )
        self.username = username
        self.password = password

    def session(self) -> Session:
        session = super().session()
        if self.username and self.password:
            session.auth = requests.auth.HTTPDigestAuth(self.username, self.password)
        return session


class MockSessionClient(BaseClient):

    namespace = 'some-namespace'

    def __init__(self, session: Session) -> None:
        super().__init__('localhost', 1234)
        self._session = session

    def session(self) -> Session:
        return self._session


class TestLiveClient(unittest.TestCase):
    _server: subprocess.Popen

    @classmethod
    def setUpClass(cls):
        os.chdir(os.path.dirname(__file__))
        cmd = ['python', 'server/run.py']
        cls._server = subprocess.Popen(cmd)
        time.sleep(1)

    @classmethod
    def tearDownClass(cls):
        cls._server.terminate()

    def test_client_method_mapping(self):
        c = Client('localhost', 8000, '42', https=False)

        result = c.example.test()

        assert_that(result, equal_to(b'''{"foo": "bar"}'''))

    def test_client_command_with_call(self):
        c = Client('localhost', 8000, '42', https=False)

        result = c.example()

        assert_that(result, equal_to(b'''{"foo": "bar"}'''))

    def test_client_command_after_session_expiry(self):
        assert_that(self._server.returncode, equal_to(None), 'server should be running')

        c = Client(
            'localhost',
            8000,
            'auth/42',
            username='username',
            password='password',
            https=False,
        )

        result = c.example()
        assert_that(result, equal_to(b'''{"foo": "bar"}'''))

        time.sleep(2)

        result = c.example()
        assert_that(result, equal_to(b'''{"foo": "bar"}'''))


class TestBaseClient(unittest.TestCase):
    def new_client(
        self,
        host='localhost',
        port=None,
        version=None,
        username=None,
        password=None,
        https=None,
        timeout=None,
        verify_certificate=None,
        token=None,
        **kwargs,
    ):
        return Client(
            host=host,
            port=port,
            version=version,
            username=username,
            password=password,
            https=https,
            timeout=timeout,
            verify_certificate=verify_certificate,
            token=token,
            **kwargs,
        )

    @patch.object(logger, 'debug')
    def test_that_extra_kwargs_are_ignored(self, logger_debug):
        self.new_client(patate=True)

        logger_debug.assert_called_once_with(ANY, 'Client', ['patate'])

    def test_given_no_https_then_http_used(self):
        client = self.new_client(https=False)

        assert_that(client.url(), contains_string('http://'))

    def test_given_https_then_https_used(self):
        client = self.new_client(https=True)

        assert_that(client.url(), contains_string('https://'))

    @patch('accent_lib_rest_client.client.disable_warnings')
    def test_given_https_then_warnings_are_disabled(self, disable_warnings):
        client = self.new_client(https=True)

        client.session()

        disable_warnings.assert_called_once_with()

    def test_given_connection_parameters_then_url_built(self):
        client = self.new_client(host='myhost', port=1234, version='1.234', https=True)

        assert_that(client.url(), equal_to('https://myhost:1234/1.234'))

    def test_given_prefix_then_prefix_used(self):
        client = self.new_client(host='myhost', port=80, prefix='/api', version='1.0')

        assert_that(client.url(), contains_string('myhost:80/api/1.0'))

    def test_given_prefix_with_missing_leading_slash_then_prefix_used(self):
        client = self.new_client(host='myhost', port=80, prefix='api', version='1.0')

        assert_that(client.url(), contains_string('myhost:80/api/1.0'))

    def test_given_no_port_then_url_do_not_contains_double_dot(self):
        client = self.new_client(host='myhost', port=None, prefix='', version='')

        assert_that(client.url(), contains_string('myhost'))

    def test_given_no_version_then_prefix_do_not_end_with_slash(self):
        client = self.new_client(host='myhost', port=80, prefix='api', version='')

        assert_that(client.url(), contains_string('myhost:80/api'))

    def test_given_no_version_and_no_prefix_then_port_do_not_end_with_slash(self):
        client = self.new_client(host='myhost', port=80, prefix='', version='')

        assert_that(client.url(), contains_string('myhost:80'))

    def test_given_version_and_no_prefix_then_version_do_not_start_with_double_slash(
        self,
    ):
        client = self.new_client(host='myhost', port=80, prefix='', version='0.1')

        assert_that(client.url(), contains_string('myhost:80/0.1'))

    def test_given_resource_then_resource_name_is_in_url(self):
        client = self.new_client()

        assert_that(client.url('resource'), ends_with('/resource'))

    def test_given_username_and_password_then_session_authenticated(self):
        client = self.new_client(username='username', password='password')
        session = client.session()

        assert_that(session.auth.username, equal_to('username'))
        assert_that(session.auth.password, equal_to('password'))

    def test_timeout(self):
        client = self.new_client(timeout=1)

        session = client.session()

        try:
            start = time.time()
            session.get('http://169.254.0.1')
        except Timeout:
            assert_that(time.time() - start, close_to(1.0, 0.9))
        except KeyboardInterrupt:
            self.fail('Should have timeout after 1 second')
        else:
            self.fail('Should have timeout after 1 second')

    def test_token(self):
        token_id = 'the-one-ring'
        client = self.new_client(token=token_id)

        session = client.session()

        assert_that(session.headers, has_entry('X-Auth-Token', token_id))

    def test_set_token(self):
        token_id = 'the-one-ring'
        client = self.new_client()

        client.set_token(token_id)

        session = client.session()
        assert_that(session.headers, has_entry('X-Auth-Token', token_id))

    def test_tenant_param(self):
        tenant_id = 'my-tenant'
        client = self.new_client(tenant=tenant_id)

        session = client.session()
        assert_that(session.headers, has_entry('Accent-Tenant', tenant_id))

    def test_set_tenant(self):
        tenant_id = 'my-tenant'
        client = self.new_client()

        client.set_tenant(tenant_id)

        session = client.session()
        assert_that(session.headers, has_entry('Accent-Tenant', tenant_id))

    def test_tenant(self):
        tenant_id = 'my-tenant'
        client = self.new_client()
        client.set_tenant(tenant_id)

        result = client.tenant()

        assert_that(result, equal_to(tenant_id))

    def test_given_no_exception_when_is_server_reachable_then_true(self):
        session = Mock()
        client = MockSessionClient(session)

        result = client.is_server_reachable()

        assert_that(result, is_(True))

    def test_given_httperror_exception_when_is_server_reachable_then_true(self):
        session = Mock()
        session.head.side_effect = HTTPError
        client = MockSessionClient(session)

        result = client.is_server_reachable()

        assert_that(result, is_(True))

    def test_given_requestexception_when_is_server_reachable_then_false(self):
        session = Mock()
        session.head.side_effect = RequestException
        client = MockSessionClient(session)

        result = client.is_server_reachable()

        assert_that(result, is_(False))

----------------------------------------

File: tests/test_command.py
Please review for update

# Copyright 2023 Accent Communications

import unittest
from unittest.mock import Mock, sentinel

from hamcrest import assert_that, equal_to

from ..command import HTTPCommand, RESTCommand


class TestHTTPCommand(unittest.TestCase):
    def test_raise_from_response_no_message(self):
        class ExpectedError(Exception):
            pass

        response = Mock(
            text='not a dict with message',
            raise_for_status=Mock(side_effect=ExpectedError),
        )

        self.assertRaises(ExpectedError, HTTPCommand.raise_from_response, response)

    def test_raise_from_response_substitute_reason_for_the_message(self):
        class ExpectedError(Exception):
            pass

        response = Mock(
            text='{"message": "Expected reason"}',
            raise_for_status=Mock(side_effect=ExpectedError),
        )

        self.assertRaises(ExpectedError, HTTPCommand.raise_from_response, response)
        assert_that(response.reason, equal_to('Expected reason'))

    def test_raise_from_response_does_not_raise_keyerror_or_valueerror(self):
        response = Mock(text='not a dict with message')

        try:
            HTTPCommand.raise_from_response(response)
        except (KeyError, ValueError):
            self.fail('KeyError or ValueError unexpectedly raised')

    def test_raise_from_response_does_not_raise_typeerror(self):
        response = Mock(text=None)

        try:
            HTTPCommand.raise_from_response(response)
        except TypeError:
            self.fail('TypeError unexpectedly raised')


class TestRESTCommand(unittest.TestCase):
    def setUp(self):
        class TestCommand(RESTCommand):
            resource = 'test'

        self.TestCommand = TestCommand

    def test_init_base_url_built(self):
        client = Mock()
        client.timeout = sentinel.timeout
        url = client.url.return_value = 'https://example.com:9000/42/test'

        c = self.TestCommand(client)

        assert_that(c.base_url, equal_to(url))
        assert_that(c.timeout, equal_to(sentinel.timeout))
        client.url.assert_called_once_with(self.TestCommand.resource)

    def test_get_headers_accept(self):
        client = Mock()

        c = self.TestCommand(client)

        expected_headers = {'Accept': 'application/json'}
        assert_that(c._get_headers(), equal_to(expected_headers))

    def test_get_headers_custom_tenant_uuid(self):
        client = Mock()
        kwargs = {'tenant_uuid': 'custom-tenant'}

        c = self.TestCommand(client)

        expected_headers = {
            'Accept': 'application/json',
            'Accent-Tenant': 'custom-tenant',
        }
        assert_that(c._get_headers(**kwargs), equal_to(expected_headers))

----------------------------------------

File: __init__.py
Please review for update

# Copyright 2023 Accent Communications

from .command import HTTPCommand, RESTCommand

__all__ = ['HTTPCommand', 'RESTCommand']

----------------------------------------

File: client.py
Please review for update

# Copyright 2023 Accent Communications

from __future__ import annotations

import logging
import os
import sys
from functools import partial
from typing import Any

from requests import HTTPError, RequestException, Session
from stevedore import extension
from urllib3 import disable_warnings


logger = logging.getLogger(__name__)

global PLUGINS_CACHE
PLUGINS_CACHE: dict[str, list[extension.Extension]] = {}


class InvalidArgumentError(Exception):
    def __init__(self, argument_name: str) -> None:
        super().__init__(f'Invalid value for argument "{argument_name}"')


class BaseClient:

    namespace: str | None = None
    _url_fmt = '{scheme}://{host}{port}{prefix}{version}'

    def __init__(
        self,
        host: str,
        port: int,
        version: str = '',
        token: str | None = None,
        tenant: str | None = None,
        https: bool = True,
        timeout: int = 10,
        verify_certificate: bool = True,
        prefix: str | None = None,
        user_agent: str = '',
        **kwargs: Any,
    ) -> None:
        if not host:
            raise InvalidArgumentError('host')
        if not user_agent:
            user_agent = os.path.basename(sys.argv[0])
        self.host = host
        self.port = port
        self.timeout = timeout
        self._version = version
        self._token_id = token
        self._https = https
        self._verify_certificate = verify_certificate
        self._prefix = self._build_prefix(prefix)
        self._user_agent = user_agent
        if kwargs:
            logger.debug(
                '%s received unexpected arguments: %s',
                self.__class__.__name__,
                list(kwargs.keys()),
            )
        self._load_plugins()

        self.tenant_uuid = tenant

    def _build_prefix(self, prefix: str | None) -> str:
        if not prefix:
            return ''
        if not prefix.startswith('/'):
            prefix = '/' + prefix
        return prefix

    def _load_plugins(self) -> None:
        global PLUGINS_CACHE

        if not self.namespace:
            raise ValueError('You must redefine BaseClient.namespace')

        if self.namespace not in PLUGINS_CACHE:
            PLUGINS_CACHE[self.namespace] = list(
                extension.ExtensionManager(self.namespace)
            )

        plugins = PLUGINS_CACHE[self.namespace]
        if not plugins:
            logger.warning('No commands found')
            return

        for ext in plugins:
            setattr(self, ext.name, ext.plugin(self))

    def session(self) -> Session:
        session = Session()
        session.headers = {'Connection': 'close'}

        if self.timeout is not None:
            session.request = partial(  # type: ignore[assignment]
                session.request, timeout=self.timeout
            )

        if self._https:
            if not self._verify_certificate:
                disable_warnings()
                session.verify = False
            else:
                session.verify = self._verify_certificate

        if self._token_id:
            session.headers['X-Auth-Token'] = self._token_id

        if self.tenant_uuid:
            session.headers['Accent-Tenant'] = self.tenant_uuid

        if self._user_agent:
            session.headers['User-agent'] = self._user_agent

        return session

    def set_tenant(self, tenant_uuid: str) -> None:
        logger.warning('set_tenant() is deprecated. Please use tenant_uuid')
        self.tenant_uuid = tenant_uuid

    def tenant(self) -> str | None:
        logger.warning('tenant() is deprecated. Please use tenant_uuid')
        return self.tenant_uuid

    def set_token(self, token: str) -> None:
        self._token_id = token

    def url(self, *fragments: str) -> str:
        base = self._url_fmt.format(
            scheme='https' if self._https else 'http',
            host=self.host,
            port=f':{self.port}' if self.port else '',
            prefix=self._prefix,
            version=f'/{self._version}' if self._version else '',
        )
        if fragments:
            path = '/'.join(str(fragment) for fragment in fragments)
            base = f"{base}/{path}"
        return base

    def is_server_reachable(self) -> bool:
        try:
            self.session().head(self.url())
            return True
        except HTTPError:
            return True
        except RequestException as e:
            logger.debug('Server unreachable: %s', e)
            return False

----------------------------------------

File: command.py
Please review for update

# Copyright 2023 Accent Communications

from __future__ import annotations

import json
from abc import ABCMeta, abstractmethod

from requests import Response, Session

from accent_lib_rest_client.client import BaseClient


class HTTPCommand:
    def __init__(self, client: BaseClient) -> None:
        self._client = client

    @property
    def session(self) -> Session:
        return self._client.session()

    @staticmethod
    def raise_from_response(response: Response) -> None:
        try:
            response.reason = json.loads(response.text)['message']
        except (ValueError, KeyError, TypeError):
            pass

        response.raise_for_status()


class RESTCommand(HTTPCommand):

    __metaclass__ = ABCMeta

    _headers = {'Accept': 'application/json'}

    @property
    @abstractmethod
    def resource(self) -> str:
        pass

    def __init__(self, client: BaseClient) -> None:
        super().__init__(client)
        self.base_url = self._client.url(self.resource)
        self.timeout = self._client.timeout

    def _get_headers(self, **kwargs: str) -> dict[str, str]:
        headers = dict(self._headers)
        # The requests session will use self.tenant_uuid by default
        tenant_uuid = kwargs.pop('tenant_uuid', None)
        if tenant_uuid:
            headers['Accent-Tenant'] = str(tenant_uuid)
        return headers

----------------------------------------

File: example_cmd.py
Please review for update

# Copyright 2023 Accent Communications

from .command import RESTCommand


class ExampleCommand(RESTCommand):

    resource = 'test'

    def __call__(self) -> bytes:
        return self.test()

    def test(self) -> bytes:
        r = self.session.get(self.base_url)
        return r.content

----------------------------------------

