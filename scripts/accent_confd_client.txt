File: __init__.py
Please review for update

# Copyright 2023 Accent Communications

from accent_confd_client.client import ConfdClient as Client

__all__ = [
    'Client',
]

----------------------------------------

File: client.py
Please review for update

# Copyright 2023 Accent Communications

from accent_lib_rest_client.client import BaseClient

from accent_confd_client.session import ConfdSession


class ConfdClient(BaseClient):
    namespace = 'accent_confd_client.commands'

    def __init__(self, host, port=443, prefix='/api/confd', version='1.1', **kwargs):
        super().__init__(host=host, port=port, prefix=prefix, version=version, **kwargs)

    def session(self):
        session = super().session()
        return ConfdSession(session, self.url())

----------------------------------------

File: commands/__init__.py
Please review for update


----------------------------------------

File: commands/access_features.py
Please review for update

# Copyright 2023 Accent Communications

from accent_confd_client.crud import CRUDCommand


class AccessFeaturesCommand(CRUDCommand):
    resource = 'access_features'

----------------------------------------

File: commands/agents.py
Please review for update

# Copyright 2023 Accent Communications

from accent_confd_client.crud import MultiTenantCommand
from accent_confd_client.relations import AgentSkillRelation
from accent_confd_client.util import extract_id


class AgentRelation:
    def __init__(self, builder, agent_id):
        self.agent_id = agent_id
        self.agent_skill = AgentSkillRelation(builder)

    @extract_id
    def add_skill(self, skill_id, **kwargs):
        return self.agent_skill.associate(self.agent_id, skill_id, **kwargs)

    @extract_id
    def remove_skill(self, skill_id):
        return self.agent_skill.dissociate(self.agent_id, skill_id)


class AgentsCommand(MultiTenantCommand):
    resource = 'agents'
    relation_cmd = AgentRelation

----------------------------------------

File: commands/applications.py
Please review for update

# Copyright 2023 Accent Communications

from accent_confd_client.crud import MultiTenantCommand


class ApplicationsCommand(MultiTenantCommand):
    resource = 'applications'

----------------------------------------

File: commands/call_filters.py
Please review for update

# Copyright 2023 Accent Communications

from accent_confd_client.crud import MultiTenantCommand
from accent_confd_client.relations import (
    CallFilterFallbackRelation,
    CallFilterRecipientUserRelation,
    CallFilterSurrogateUserRelation,
)


class CallFilterRelation:
    def __init__(self, builder, call_filter_id):
        self.call_filter_id = call_filter_id
        self.call_filter_user_recipients = CallFilterRecipientUserRelation(builder)
        self.call_filter_user_surrogates = CallFilterSurrogateUserRelation(builder)
        self.call_filter_fallback = CallFilterFallbackRelation(builder)

    def update_user_surrogates(self, users):
        return self.call_filter_user_surrogates.associate(self.call_filter_id, users)

    def update_user_recipients(self, users):
        return self.call_filter_user_recipients.associate(self.call_filter_id, users)

    def update_fallbacks(self, fallbacks):
        self.call_filter_fallback.update_fallbacks(self.call_filter_id, fallbacks)


class CallFiltersCommand(MultiTenantCommand):
    resource = 'callfilters'
    relation_cmd = CallFilterRelation

----------------------------------------

File: commands/call_logs.py
Please review for update

# Copyright 2023 Accent Communications

import requests
from accent_lib_rest_client import RESTCommand


class CallLogsCommand(RESTCommand):
    DATETIME_FMT = "%Y-%m-%dT%H:%M:%S"

    resource = 'call_logs'

    def list(self, start_date=None, end_date=None):
        params = self.build_params(start_date, end_date)
        response = self.session.get(
            self.resource, params=params, headers={'Accept': 'text/csv'}
        )

        if response.status_code != requests.codes.ok:
            self.raise_from_response(response)

        return response.text

    def build_params(self, start_date=None, end_date=None):
        params = {}
        if start_date:
            params['start_date'] = start_date.strftime(self.DATETIME_FMT)
        if end_date:
            params['end_date'] = end_date.strftime(self.DATETIME_FMT)
        return params

----------------------------------------

File: commands/call_permissions.py
Please review for update

# Copyright 2023 Accent Communications

from accent_confd_client.crud import MultiTenantCommand
from accent_confd_client.relations import UserCallPermissionRelation
from accent_confd_client.util import extract_id


class CallPermissionRelation:
    def __init__(self, builder, call_permission_id):
        self.call_permission_id = call_permission_id
        self.user_call_permission = UserCallPermissionRelation(builder)

    @extract_id
    def add_user(self, user_id):
        return self.user_call_permission.associate(user_id, self.call_permission_id)

    @extract_id
    def remove_user(self, user_id):
        return self.user_call_permission.dissociate(user_id, self.call_permission_id)


class CallPermissionsCommand(MultiTenantCommand):
    resource = 'callpermissions'
    relation_cmd = CallPermissionRelation

----------------------------------------

File: commands/call_pickups.py
Please review for update

# Copyright 2023 Accent Communications

from accent_confd_client.crud import MultiTenantCommand
from accent_confd_client.relations import (
    CallPickupInterceptorGroupRelation,
    CallPickupInterceptorUserRelation,
    CallPickupTargetGroupRelation,
    CallPickupTargetUserRelation,
)


class CallPickupRelation:
    def __init__(self, builder, call_pickup_id):
        self.call_pickup_id = call_pickup_id
        self.call_pickup_group_interceptors = CallPickupInterceptorGroupRelation(
            builder
        )
        self.call_pickup_group_targets = CallPickupTargetGroupRelation(builder)
        self.call_pickup_user_interceptors = CallPickupInterceptorUserRelation(builder)
        self.call_pickup_user_targets = CallPickupTargetUserRelation(builder)

    def update_group_targets(self, groups):
        return self.call_pickup_group_targets.associate(self.call_pickup_id, groups)

    def update_group_interceptors(self, groups):
        return self.call_pickup_group_interceptors.associate(
            self.call_pickup_id, groups
        )

    def update_user_targets(self, users):
        return self.call_pickup_user_targets.associate(self.call_pickup_id, users)

    def update_user_interceptors(self, users):
        return self.call_pickup_user_interceptors.associate(self.call_pickup_id, users)


class CallPickupsCommand(MultiTenantCommand):
    resource = 'callpickups'
    relation_cmd = CallPickupRelation

----------------------------------------

File: commands/confbridge_accent_default_bridge.py
Please review for update

# Copyright 2023 Accent Communications

from accent_lib_rest_client import RESTCommand


class ConfBridgeAccentDefaultBridgeCommand(RESTCommand):
    resource = 'asterisk/confbridge/accent_default_bridge'

    def get(self):
        response = self.session.get(self.resource)
        return response.json()

    def update(self, body):
        self.session.put(self.resource, body)

----------------------------------------

File: commands/confbridge_accent_default_user.py
Please review for update

# Copyright 2023 Accent Communications

from accent_lib_rest_client import RESTCommand


class ConfBridgeAccentDefaultUserCommand(RESTCommand):
    resource = 'asterisk/confbridge/accent_default_user'

    def get(self):
        response = self.session.get(self.resource)
        return response.json()

    def update(self, body):
        self.session.put(self.resource, body)

----------------------------------------

File: commands/conferences.py
Please review for update

# Copyright 2023 Accent Communications

from accent_confd_client.crud import MultiTenantCommand
from accent_confd_client.relations import ConferenceExtensionRelation
from accent_confd_client.util import extract_id


class ConferenceRelation:
    def __init__(self, builder, conference_id):
        self.conference_id = conference_id
        self.conference_extension = ConferenceExtensionRelation(builder)

    @extract_id
    def add_extension(self, extension_id):
        return self.conference_extension.associate(self.conference_id, extension_id)

    @extract_id
    def remove_extension(self, extension_id):
        return self.conference_extension.dissociate(self.conference_id, extension_id)


class ConferencesCommand(MultiTenantCommand):
    resource = 'conferences'
    relation_cmd = ConferenceRelation

----------------------------------------

File: commands/configuration.py
Please review for update

# Copyright 2023 Accent Communications

from accent_lib_rest_client import HTTPCommand

from accent_confd_client.util import url_join


class LiveReloadCommand(HTTPCommand):
    def get(self):
        url = url_join('configuration', 'live_reload')
        r = self.session.get(url)

        return r.json()

    def update(self, body):
        url = url_join('configuration', 'live_reload')
        self.session.put(url, body)


class ConfigurationCommand:
    def __init__(self, client):
        self.live_reload = LiveReloadCommand(client)

----------------------------------------

File: commands/contexts.py
Please review for update

# Copyright 2023 Accent Communications

from accent_confd_client.crud import MultiTenantCommand
from accent_confd_client.relations import ContextContextRelation, ContextRangeRelation


class ContextRelation:
    def __init__(self, builder, context_id):
        self.context_id = context_id
        self.context_context = ContextContextRelation(builder)
        self.context_range = ContextRangeRelation(builder)

    def update_contexts(self, contexts):
        return self.context_context.associate(self.context_id, contexts)

    def list_ranges(self, range_type, **kwargs):
        return self.context_range.list_ranges(self.context_id, range_type, **kwargs)


class ContextsCommand(MultiTenantCommand):
    resource = 'contexts'
    relation_cmd = ContextRelation

----------------------------------------

File: commands/devices.py
Please review for update

# Copyright 2023 Accent Communications

from accent_lib_rest_client import RESTCommand

from accent_confd_client.crud import MultiTenantCommand
from accent_confd_client.relations import LineDeviceRelation
from accent_confd_client.util import extract_id, url_join


class DeviceRelation:
    def __init__(self, builder, device_id):
        self.device_id = device_id
        self.line_device = LineDeviceRelation(builder)

    @extract_id
    def add_line(self, line_id):
        return self.line_device.associate(line_id, self.device_id)

    @extract_id
    def remove_line(self, line_id):
        return self.line_device.dissociate(line_id, self.device_id)

    def list_lines(self):
        return self.line_device.list_by_device(self.device_id)


class DevicesCommand(MultiTenantCommand):
    resource = 'devices'
    relation_cmd = DeviceRelation

    @extract_id
    def autoprov(self, device_id, **kwargs):
        tenant_uuid = kwargs.pop('tenant_uuid', self._client.tenant_uuid)
        headers = dict(kwargs.get('headers', self.session.READ_HEADERS))
        if tenant_uuid:
            headers['Accent-Tenant'] = tenant_uuid
        url = url_join(self.resource, device_id, 'autoprov')
        self.session.get(url, headers=headers)

    @extract_id
    def synchronize(self, device_id, **kwargs):
        tenant_uuid = kwargs.pop('tenant_uuid', self._client.tenant_uuid)
        headers = dict(kwargs.get('headers', self.session.READ_HEADERS))
        if tenant_uuid:
            headers['Accent-Tenant'] = tenant_uuid
        url = url_join(self.resource, device_id, 'synchronize')
        self.session.get(url, headers=headers)


class UnallocatedDevicesCommand(RESTCommand):
    resource = 'devices/unallocated'

    def list(self, **kwargs):
        url = url_join(self.resource)
        response = self.session.get(url, params=kwargs)
        return response.json()

    def assign_tenant(self, device_id, **kwargs):
        tenant_uuid = kwargs.pop('tenant_uuid', self._client.tenant_uuid)
        headers = dict(kwargs.get('headers', self.session.WRITE_HEADERS))
        if tenant_uuid:
            headers['Accent-Tenant'] = tenant_uuid
        url = url_join(self.resource, device_id)
        self.session.put(url, headers=headers)

----------------------------------------

File: commands/dhcp.py
Please review for update

# Copyright 2023 Accent Communications

from accent_lib_rest_client import HTTPCommand

from accent_confd_client.util import url_join


class DHCPCommand(HTTPCommand):
    headers = {'Accept': 'application/json'}

    def get(self):
        url = url_join('dhcp')
        r = self.session.get(url, headers=self.headers)

        return r.json()

    def update(self, body):
        url = url_join('dhcp')
        self.session.put(url, json=body, headers=self.headers)

----------------------------------------

File: commands/emails.py
Please review for update

# Copyright 2023 Accent Communications

from accent_lib_rest_client import RESTCommand


class EmailsCommand(RESTCommand):
    resource = 'emails'

    def get(self):
        r = self.session.get(self.resource)
        return r.json()

    def update(self, body):
        self.session.put(self.resource, body)

----------------------------------------

File: commands/endpoints_custom.py
Please review for update

# Copyright 2023 Accent Communications

from accent_confd_client.crud import MultiTenantCommand
from accent_confd_client.relations import (
    LineEndpointCustomRelation,
    TrunkEndpointCustomRelation,
)


class EndpointCustomRelation:
    def __init__(self, builder, custom_id):
        self.custom_id = custom_id
        self.line_endpoint_custom = LineEndpointCustomRelation(builder)
        self.trunk_endpoint_custom = TrunkEndpointCustomRelation(builder)

    def associate_line(self, line_id):
        self.line_endpoint_custom.associate(line_id, self.custom_id)

    def dissociate_line(self, line_id):
        self.line_endpoint_custom.dissociate(line_id, self.custom_id)


class EndpointsCustomCommand(MultiTenantCommand):
    resource = 'endpoints/custom'
    relation_cmd = EndpointCustomRelation

----------------------------------------

File: commands/endpoints_iax.py
Please review for update

# Copyright 2023 Accent Communications

from accent_confd_client.crud import MultiTenantCommand


class EndpointsIAXCommand(MultiTenantCommand):
    resource = 'endpoints/iax'

----------------------------------------

File: commands/endpoints_sccp.py
Please review for update

# Copyright 2023 Accent Communications

from accent_confd_client.crud import MultiTenantCommand
from accent_confd_client.relations import LineEndpointSccpRelation


class EndpointSccpRelation:
    def __init__(self, builder, sccp_id):
        self.sccp_id = sccp_id
        self.line_endpoint_sccp = LineEndpointSccpRelation(builder)

    def associate_line(self, line_id):
        self.line_endpoint_sccp.associate(line_id, self.sccp_id)

    def dissociate_line(self, line_id):
        self.line_endpoint_sccp.dissociate(line_id, self.sccp_id)


class EndpointsSccpCommand(MultiTenantCommand):
    resource = 'endpoints/sccp'
    relation_cmd = EndpointSccpRelation

----------------------------------------

File: commands/endpoints_sip.py
Please review for update

# Copyright 2023 Accent Communications

from accent_confd_client.crud import MultiTenantCommand
from accent_confd_client.relations import (
    LineEndpointSipRelation,
    TrunkEndpointSipRelation,
)


class EndpointSipRelation:
    def __init__(self, builder, sip_id):
        self.sip_id = sip_id
        self.line_endpoint_sip = LineEndpointSipRelation(builder)
        self.trunk_endpoint_sip = TrunkEndpointSipRelation(builder)

    def associate_line(self, line_id):
        self.line_endpoint_sip.associate(line_id, self.sip_id)

    def dissociate_line(self, line_id):
        self.line_endpoint_sip.dissociate(line_id, self.sip_id)


class EndpointsSipCommand(MultiTenantCommand):
    resource = 'endpoints/sip'
    relation_cmd = EndpointSipRelation

----------------------------------------

File: commands/endpoints_sip_templates.py
Please review for update

# Copyright 2023 Accent Communications

from accent_confd_client.crud import MultiTenantCommand


class EndpointsSipTemplatesCommand(MultiTenantCommand):
    resource = 'endpoints/sip/templates'

----------------------------------------

File: commands/entities.py
Please review for update

# Copyright 2023 Accent Communications

from accent_confd_client.crud import CRUDCommand
from accent_confd_client.util import url_join


class EntitiesCommand(CRUDCommand):
    resource = 'entities'

    def create(self, body):
        headers = dict(self.session.WRITE_HEADERS)
        tenant_uuid = body.pop('tenant_uuid', self._client.tenant_uuid)
        if tenant_uuid:
            headers['Accent-Tenant'] = tenant_uuid

        url = url_join(self.resource)
        response = self.session.post(url, body, headers=headers)
        return response.json()

----------------------------------------

File: commands/extensions.py
Please review for update

# Copyright 2023 Accent Communications

from accent_confd_client.crud import MultiTenantCommand
from accent_confd_client.relations import LineExtensionRelation
from accent_confd_client.util import extract_id


class ExtensionRelation:
    def __init__(self, builder, extension_id):
        self.extension_id = extension_id
        self.line_extension_relation = LineExtensionRelation(builder)

    @extract_id
    def add_line(self, line_id):
        return self.line_extension_relation.associate(line_id, self.extension_id)

    @extract_id
    def remove_line(self, line_id):
        return self.line_extension_relation.dissociate(line_id, self.extension_id)


class ExtensionsCommand(MultiTenantCommand):
    resource = 'extensions'

    relation_cmd = ExtensionRelation

----------------------------------------

File: commands/extensions_features.py
Please review for update

# Copyright 2023 Accent Communications

from accent_confd_client.crud import CRUDCommand


class ExtensionsFeaturesCommand(CRUDCommand):
    resource = 'extensions/features'

    def create(self):
        raise NotImplementedError()

    def delete(self):
        raise NotImplementedError()

----------------------------------------

File: commands/external_apps.py
Please review for update

# Copyright 2023 Accent Communications

from accent_confd_client.crud import MultiTenantCommand
from accent_confd_client.util import extract_name, url_join


class ExternalAppsCommand(MultiTenantCommand):
    resource = 'external/apps'

    @extract_name()
    def get(self, resource_id):
        url = url_join(self.resource, resource_id)
        response = self.session.get(url)
        return response.json()

    @extract_name(pass_original=True)
    def create(self, name, body):
        url = url_join(self.resource, name)
        response = self.session.post(url, body)
        return response.json()

    @extract_name(pass_original=True)
    def update(self, name, body):
        url = url_join(self.resource, name)
        body = {key: value for key, value in body.items() if key != "links"}
        self.session.put(url, body)

    @extract_name()
    def delete(self, resource_id):
        url = url_join(self.resource, resource_id)
        self.session.delete(url)

----------------------------------------

File: commands/features_applicationmap.py
Please review for update

# Copyright 2023 Accent Communications

from accent_lib_rest_client import RESTCommand


class FeaturesApplicationmapCommand(RESTCommand):
    resource = 'asterisk/features/applicationmap'

    def get(self):
        response = self.session.get(self.resource)
        return response.json()

    def update(self, body):
        self.session.put(self.resource, body)

----------------------------------------

File: commands/features_featuremap.py
Please review for update

# Copyright 2023 Accent Communications

from accent_lib_rest_client import RESTCommand


class FeaturesFeaturemapCommand(RESTCommand):
    resource = 'asterisk/features/featuremap'

    def get(self):
        response = self.session.get(self.resource)
        return response.json()

    def update(self, body):
        self.session.put(self.resource, body)

----------------------------------------

File: commands/features_general.py
Please review for update

# Copyright 2023 Accent Communications

from accent_lib_rest_client import RESTCommand


class FeaturesGeneralCommand(RESTCommand):
    resource = 'asterisk/features/general'

    def get(self):
        response = self.session.get(self.resource)
        return response.json()

    def update(self, body):
        self.session.put(self.resource, body)

----------------------------------------

File: commands/funckeys.py
Please review for update

# Copyright 2023 Accent Communications

from accent_confd_client.crud import CRUDCommand
from accent_confd_client.relations import UserFuncKeyRelation
from accent_confd_client.util import url_join


class TemplateRelation:
    def __init__(self, builder, template_id):
        self.template_id = template_id
        self.user_funckey = UserFuncKeyRelation(builder)

    def add_user(self, user_id):
        self.user_funckey.associate_template(user_id, self.template_id)

    def remove_user(self, user_id):
        self.user_funckey.dissociate_template(user_id, self.template_id)


class FuncKeysCommand(CRUDCommand):
    resource = 'funckeys/templates'
    relation_cmd = TemplateRelation

    def get_template_funckey(self, template_id, position):
        url = url_join(self.resource, template_id, position)
        response = self.session.get(url)
        return response.json()

    def delete_template_funckey(self, template_id, position):
        url = url_join(self.resource, template_id, position)
        self.session.delete(url)

    def update_template_funckey(self, template_id, position, funckey):
        url = url_join(self.resource, template_id, position)
        self.session.put(url, funckey)

----------------------------------------

File: commands/groups.py
Please review for update

# Copyright 2023 Accent Communications

from accent_confd_client.crud import MultiTenantCommand
from accent_confd_client.relations import (
    GroupCallPermissionRelation,
    GroupExtensionRelation,
    GroupFallbackRelation,
    GroupMemberExtensionRelation,
    GroupMemberUserRelation,
    GroupScheduleRelation,
)
from accent_confd_client.util import extract_id


class GroupRelation:
    def __init__(self, builder, group_id):
        self.group_id = group_id
        self.group_call_permission = GroupCallPermissionRelation(builder)
        self.group_extension = GroupExtensionRelation(builder)
        self.group_user_members = GroupMemberUserRelation(builder)
        self.group_extension_members = GroupMemberExtensionRelation(builder)
        self.group_fallback = GroupFallbackRelation(builder)
        self.group_schedule = GroupScheduleRelation(builder)

    def update_user_members(self, users):
        return self.group_user_members.associate(self.group_id, users)

    def update_extension_members(self, extensions):
        return self.group_extension_members.associate(self.group_id, extensions)

    @extract_id
    def add_extension(self, extension_id):
        return self.group_extension.associate(self.group_id, extension_id)

    @extract_id
    def remove_extension(self, extension_id):
        return self.group_extension.dissociate(self.group_id, extension_id)

    def update_fallbacks(self, fallbacks):
        self.group_fallback.update_fallbacks(self.group_id, fallbacks)

    def list_fallbacks(self):
        return self.group_fallback.list_fallbacks(self.group_id)

    @extract_id
    def add_schedule(self, schedule_id):
        return self.group_schedule.associate(self.group_id, schedule_id)

    @extract_id
    def remove_schedule(self, schedule_id):
        return self.group_schedule.dissociate(self.group_id, schedule_id)

    @extract_id
    def add_call_permission(self, call_permission_id):
        return self.group_call_permission.associate(self.group_id, call_permission_id)

    @extract_id
    def remove_call_permission(self, call_permission_id):
        self.group_call_permission.dissociate(self.group_id, call_permission_id)


class GroupsCommand(MultiTenantCommand):
    resource = 'groups'
    relation_cmd = GroupRelation

----------------------------------------

File: commands/guests.py
Please review for update

# Copyright 2023 Accent Communications

from accent_confd_client.crud import MultiTenantCommand
from accent_confd_client.util import url_join


class GuestsMeetingsAuthorizationsCommand(MultiTenantCommand):
    def __init__(self, client, guest_and_meeting_uuid):
        super().__init__(client)
        guest_uuid, meeting_uuid = guest_and_meeting_uuid
        self._resource = url_join(
            'guests', guest_uuid, 'meetings', meeting_uuid, 'authorizations'
        )

    @property
    def resource(self):
        return self._resource


class GuestsMeetingsRelation:
    def __init__(self, builder, guest_and_meeting_uuid):
        self.authorizations = GuestsMeetingsAuthorizationsCommand(
            builder, guest_and_meeting_uuid
        )


class GuestsMeetingsCommand(MultiTenantCommand):
    resource = ['meetings']
    relation_cmd = GuestsMeetingsRelation

    def __init__(self, client, guest_uuid):
        super().__init__(client)
        self.guest_uuid = guest_uuid

    def relations(self, meeting_uuid):
        return super().relations((self.guest_uuid, meeting_uuid))


class GuestsRelation:
    def __init__(self, builder, guest_uuid):
        self.guest_uuid = guest_uuid
        self.meetings = GuestsMeetingsCommand(builder, guest_uuid)


class GuestsCommand(MultiTenantCommand):
    resource = ['guests']
    relation_cmd = GuestsRelation

----------------------------------------

File: commands/ha.py
Please review for update

# Copyright 2023 Accent Communications

from accent_lib_rest_client import HTTPCommand

from accent_confd_client.util import url_join


class HACommand(HTTPCommand):
    headers = {'Accept': 'application/json'}

    def get(self):
        url = url_join('ha')
        r = self.session.get(url, headers=self.headers)

        return r.json()

    def update(self, body):
        url = url_join('ha')
        self.session.put(url, json=body, headers=self.headers)

----------------------------------------

File: commands/hep_general.py
Please review for update

# Copyright 2023 Accent Communications

from accent_lib_rest_client import RESTCommand


class HEPGeneralCommand(RESTCommand):
    resource = 'asterisk/hep/general'

    def get(self):
        response = self.session.get(self.resource)
        return response.json()

    def update(self, body):
        self.session.put(self.resource, body)

----------------------------------------

File: commands/iax_callnumberlimits.py
Please review for update

# Copyright 2023 Accent Communications

from accent_lib_rest_client import RESTCommand


class IAXCallNumberLimitsCommand(RESTCommand):
    resource = 'asterisk/iax/callnumberlimits'

    def get(self):
        response = self.session.get(self.resource)
        return response.json()

    def update(self, body):
        self.session.put(self.resource, body)

----------------------------------------

File: commands/iax_general.py
Please review for update

# Copyright 2023 Accent Communications

from accent_lib_rest_client import RESTCommand


class IAXGeneralCommand(RESTCommand):
    resource = 'asterisk/iax/general'

    def get(self):
        response = self.session.get(self.resource)
        return response.json()

    def update(self, body):
        self.session.put(self.resource, body)

----------------------------------------

File: commands/incalls.py
Please review for update

# Copyright 2023 Accent Communications

from accent_confd_client.crud import MultiTenantCommand
from accent_confd_client.relations import IncallExtensionRelation, IncallScheduleRelation
from accent_confd_client.util import extract_id


class IncallRelation:
    def __init__(self, builder, incall_id):
        self.incall_id = incall_id
        self.incall_extension = IncallExtensionRelation(builder)
        self.incall_schedule = IncallScheduleRelation(builder)

    @extract_id
    def add_extension(self, extension_id):
        return self.incall_extension.associate(self.incall_id, extension_id)

    @extract_id
    def remove_extension(self, extension_id):
        return self.incall_extension.dissociate(self.incall_id, extension_id)

    @extract_id
    def add_schedule(self, schedule_id):
        return self.incall_schedule.associate(self.incall_id, schedule_id)

    @extract_id
    def remove_schedule(self, schedule_id):
        return self.incall_schedule.dissociate(self.incall_id, schedule_id)


class IncallsCommand(MultiTenantCommand):
    resource = 'incalls'
    relation_cmd = IncallRelation

----------------------------------------

File: commands/infos.py
Please review for update

# Copyright 2023 Accent Communications

from accent_lib_rest_client import HTTPCommand


class InfosCommand(HTTPCommand):
    def __call__(self):
        return self.get()

    def get(self):
        r = self.session.get('/infos')

        return r.json()

----------------------------------------

File: commands/ingress_http.py
Please review for update

# Copyright 2023 Accent Communications

from accent_confd_client.crud import MultiTenantCommand


class IngressHttpCommand(MultiTenantCommand):
    resource = 'ingresses/http'

----------------------------------------

File: commands/ivr.py
Please review for update

# Copyright 2023 Accent Communications

from accent_confd_client.crud import MultiTenantCommand


class IVRCommand(MultiTenantCommand):
    resource = 'ivr'

----------------------------------------

File: commands/lines.py
Please review for update

# Copyright 2023 Accent Communications

from accent_confd_client.crud import MultiTenantCommand
from accent_confd_client.relations import (
    LineApplicationRelation,
    LineDeviceRelation,
    LineEndpointCustomRelation,
    LineEndpointSccpRelation,
    LineEndpointSipRelation,
    LineExtensionRelation,
    UserLineRelation,
)
from accent_confd_client.util import extract_id


class LineRelation:
    def __init__(self, builder, line_id):
        self.line_id = line_id
        self.user_line = UserLineRelation(builder)
        self.line_application = LineApplicationRelation(builder)
        self.line_extension = LineExtensionRelation(builder)
        self.line_endpoint_sip = LineEndpointSipRelation(builder)
        self.line_endpoint_sccp = LineEndpointSccpRelation(builder)
        self.line_endpoint_custom = LineEndpointCustomRelation(builder)
        self.line_device = LineDeviceRelation(builder)

    @extract_id
    def add_extension(self, extension_id):
        return self.line_extension.associate(self.line_id, extension_id)

    @extract_id
    def remove_extension(self, extension_id):
        return self.line_extension.dissociate(self.line_id, extension_id)

    @extract_id
    def add_user(self, user_id):
        return self.user_line.associate(user_id, self.line_id)

    @extract_id
    def remove_user(self, user_id):
        return self.user_line.dissociate(user_id, self.line_id)

    @extract_id
    def add_endpoint_sip(self, endpoint_sip_id):
        return self.line_endpoint_sip.associate(self.line_id, endpoint_sip_id)

    @extract_id
    def remove_endpoint_sip(self, endpoint_sip_id):
        return self.line_endpoint_sip.dissociate(self.line_id, endpoint_sip_id)

    @extract_id
    def add_endpoint_sccp(self, endpoint_sccp_id):
        return self.line_endpoint_sccp.associate(self.line_id, endpoint_sccp_id)

    @extract_id
    def remove_endpoint_sccp(self, endpoint_sccp_id):
        return self.line_endpoint_sccp.dissociate(self.line_id, endpoint_sccp_id)

    @extract_id
    def add_endpoint_custom(self, endpoint_custom_id):
        return self.line_endpoint_custom.associate(self.line_id, endpoint_custom_id)

    @extract_id
    def remove_endpoint_custom(self, endpoint_custom_id):
        return self.line_endpoint_custom.dissociate(self.line_id, endpoint_custom_id)

    @extract_id
    def add_device(self, device_id):
        return self.line_device.associate(self.line_id, device_id)

    @extract_id
    def remove_device(self, device_id):
        return self.line_device.dissociate(self.line_id, device_id)

    def get_device(self):
        return self.line_device.get_by_line(self.line_id)

    @extract_id
    def add_application(self, application_uuid):
        return self.line_application.associate(self.line_id, application_uuid)

    @extract_id
    def remove_application(self, application_uuid):
        return self.line_application.dissociate(self.line_id, application_uuid)


class LinesCommand(MultiTenantCommand):
    resource = 'lines'
    relation_cmd = LineRelation

----------------------------------------

File: commands/localization.py
Please review for update

# Copyright 2023 Accent Communications

from accent_lib_rest_client import HTTPCommand

from accent_confd_client.util import url_join


class LocalizationCommand(HTTPCommand):
    resource = 'localization'

    def get(self, **kwargs):
        tenant_uuid = kwargs.pop('tenant_uuid', None)
        headers = dict(self.session.READ_HEADERS)
        if tenant_uuid:
            headers['Accent-Tenant'] = tenant_uuid
        url = url_join(self.resource)
        response = self.session.get(url, headers=headers, params=kwargs)
        return response.json()

    def update(self, body, **kwargs):
        tenant_uuid = kwargs.pop('tenant_uuid', None)
        headers = dict(self.session.WRITE_HEADERS)
        if tenant_uuid:
            headers['Accent-Tenant'] = tenant_uuid
        url = url_join(self.resource)
        self.session.put(url, json=body, headers=headers, params=kwargs)

----------------------------------------

File: commands/meetings.py
Please review for update

# Copyright 2023 Accent Communications

from accent_confd_client.crud import MultiTenantCommand


class MeetingsCommand(MultiTenantCommand):
    resource = 'meetings'

----------------------------------------

File: commands/moh.py
Please review for update

# Copyright 2023 Accent Communications

from accent_confd_client.crud import MultiTenantCommand
from accent_confd_client.util import extract_id, url_join


class MOHCommand(MultiTenantCommand):
    resource = 'moh'

    @extract_id
    def download_file(self, moh_uuid, filename):
        url = url_join(self.resource, moh_uuid, 'files', filename)
        headers = {'Accept': '*/*'}
        response = self.session.get(url, headers=headers)
        return response

    @extract_id
    def upload_file(self, moh_uuid, filename, content):
        url = url_join(self.resource, moh_uuid, 'files', filename)
        headers = {'Content-Type': 'application/octet-stream'}
        self.session.put(url, raw=content, headers=headers)

    @extract_id
    def delete_file(self, moh_uuid, filename):
        url = url_join(self.resource, moh_uuid, 'files', filename)
        self.session.delete(url)

----------------------------------------

File: commands/my_guest_meetings.py
Please review for update

# Copyright 2023 Accent Communications

from accent_confd_client.crud import MultiTenantCommand


class GuestsMeMeetingsCommand(MultiTenantCommand):
    resource = 'guests/me/meetings'

----------------------------------------

File: commands/my_meetings.py
Please review for update

# Copyright 2023 Accent Communications

from accent_confd_client.crud import CRUDCommand, MultiTenantCommand
from accent_confd_client.util import url_join


class UsersMeMeetingsAuthorizationsCommand(MultiTenantCommand):
    def __init__(self, client, meeting_uuid):
        super().__init__(client)
        self._resource = url_join(
            'users', 'me', 'meetings', meeting_uuid, 'authorizations'
        )
        self.meeting_uuid = meeting_uuid

    @property
    def resource(self):
        return self._resource

    def accept(self, authorization_uuid):
        url = url_join(
            'users',
            'me',
            'meetings',
            self.meeting_uuid,
            'authorizations',
            authorization_uuid,
            'accept',
        )
        self.session.put(url)

    def reject(self, authorization_uuid):
        url = url_join(
            'users',
            'me',
            'meetings',
            self.meeting_uuid,
            'authorizations',
            authorization_uuid,
            'reject',
        )
        self.session.put(url)


class UsersMeMeetingsRelation(CRUDCommand):
    def __init__(self, client, meeting_uuid):
        super().__init__(client)
        self.authorizations = UsersMeMeetingsAuthorizationsCommand(client, meeting_uuid)

    @property
    def resource(self):
        return 'users/me/meetings'


class UsersMeMeetingsCommand(MultiTenantCommand):
    resource = 'users/me/meetings'
    relation_cmd = UsersMeMeetingsRelation

----------------------------------------

File: commands/outcalls.py
Please review for update

# Copyright 2023 Accent Communications

from accent_confd_client.crud import MultiTenantCommand
from accent_confd_client.relations import (
    OutcallCallPermissionRelation,
    OutcallExtensionRelation,
    OutcallScheduleRelation,
    OutcallTrunkRelation,
)
from accent_confd_client.util import extract_id


class OutcallRelation:
    def __init__(self, builder, outcall_id):
        self.outcall_id = outcall_id
        self.outcall_call_permission = OutcallCallPermissionRelation(builder)
        self.outcall_schedule = OutcallScheduleRelation(builder)
        self.outcall_trunk = OutcallTrunkRelation(builder)
        self.outcall_extension = OutcallExtensionRelation(builder)

    def update_trunks(self, trunks):
        return self.outcall_trunk.associate(self.outcall_id, trunks)

    @extract_id
    def add_extension(self, extension_id, **kwargs):
        return self.outcall_extension.associate(self.outcall_id, extension_id, **kwargs)

    @extract_id
    def remove_extension(self, extension_id):
        return self.outcall_extension.dissociate(self.outcall_id, extension_id)

    @extract_id
    def add_schedule(self, schedule_id):
        return self.outcall_schedule.associate(self.outcall_id, schedule_id)

    @extract_id
    def remove_schedule(self, schedule_id):
        return self.outcall_schedule.dissociate(self.outcall_id, schedule_id)

    @extract_id
    def add_call_permission(self, call_permission_id):
        return self.outcall_call_permission.associate(
            self.outcall_id, call_permission_id
        )

    @extract_id
    def remove_call_permission(self, call_permission_id):
        self.outcall_call_permission.dissociate(self.outcall_id, call_permission_id)


class OutcallsCommand(MultiTenantCommand):
    resource = 'outcalls'
    relation_cmd = OutcallRelation

----------------------------------------

File: commands/pagings.py
Please review for update

# Copyright 2023 Accent Communications

from accent_confd_client.crud import MultiTenantCommand
from accent_confd_client.relations import (
    PagingCallerUserRelation,
    PagingMemberUserRelation,
)


class PagingRelation:
    def __init__(self, builder, paging_id):
        self.paging_id = paging_id
        self.paging_user_callers = PagingCallerUserRelation(builder)
        self.paging_user_members = PagingMemberUserRelation(builder)

    def update_user_members(self, users):
        return self.paging_user_members.associate(self.paging_id, users)

    def update_user_callers(self, users):
        return self.paging_user_callers.associate(self.paging_id, users)


class PagingsCommand(MultiTenantCommand):
    resource = 'pagings'
    relation_cmd = PagingRelation

----------------------------------------

File: commands/parking_lots.py
Please review for update

# Copyright 2023 Accent Communications

from accent_confd_client.crud import MultiTenantCommand
from accent_confd_client.relations import ParkingLotExtensionRelation
from accent_confd_client.util import extract_id


class ParkingLotRelation:
    def __init__(self, builder, parking_lot_id):
        self.parking_lot_id = parking_lot_id
        self.parking_lot_extension = ParkingLotExtensionRelation(builder)

    @extract_id
    def add_extension(self, extension_id):
        return self.parking_lot_extension.associate(self.parking_lot_id, extension_id)

    @extract_id
    def remove_extension(self, extension_id):
        return self.parking_lot_extension.dissociate(self.parking_lot_id, extension_id)


class ParkingLotsCommand(MultiTenantCommand):
    resource = 'parkinglots'
    relation_cmd = ParkingLotRelation

----------------------------------------

File: commands/phone_numbers.py
Please review for update

# Copyright 2023 Accent Communications

from accent_confd_client.crud import MultiTenantCommand


class PhoneNumbersCommand(MultiTenantCommand):
    resource = 'phone-numbers'

----------------------------------------

File: commands/pjsip_doc.py
Please review for update

# Copyright 2023 Accent Communications

from accent_lib_rest_client import RESTCommand


class PJSIPDocCommand(RESTCommand):
    resource = 'asterisk/pjsip/doc'

    def get(self):
        response = self.session.get(self.resource)
        return response.json()

----------------------------------------

File: commands/pjsip_global.py
Please review for update

# Copyright 2023 Accent Communications

from accent_lib_rest_client import RESTCommand


class PJSIPGlobalCommand(RESTCommand):
    resource = 'asterisk/pjsip/global'

    def get(self):
        response = self.session.get(self.resource)
        return response.json()

    def update(self, body):
        self.session.put(self.resource, body)

----------------------------------------

File: commands/pjsip_system.py
Please review for update

# Copyright 2023 Accent Communications

from accent_lib_rest_client import RESTCommand


class PJSIPSystemCommand(RESTCommand):
    resource = 'asterisk/pjsip/system'

    def get(self):
        response = self.session.get(self.resource)
        return response.json()

    def update(self, body):
        self.session.put(self.resource, body)

----------------------------------------

File: commands/provisioning_networking.py
Please review for update

# Copyright 2023 Accent Communications

from accent_lib_rest_client import HTTPCommand

from accent_confd_client.util import url_join


class ProvisioningNetworkingCommand(HTTPCommand):
    headers = {'Accept': 'application/json'}

    def get(self):
        url = url_join('provisioning', 'networking')
        r = self.session.get(url, headers=self.headers)

        return r.json()

    def update(self, body):
        url = url_join('provisioning', 'networking')
        self.session.put(url, json=body, headers=self.headers)

----------------------------------------

File: commands/queues.py
Please review for update

# Copyright 2023 Accent Communications

from accent_confd_client.crud import MultiTenantCommand
from accent_confd_client.relations import (
    QueueExtensionRelation,
    QueueFallbackRelation,
    QueueMemberAgentRelation,
    QueueMemberUserRelation,
    QueueScheduleRelation,
)
from accent_confd_client.util import extract_id


class QueueRelation:
    def __init__(self, builder, queue_id):
        self.queue_id = queue_id
        self.queue_member_agent = QueueMemberAgentRelation(builder)
        self.queue_member_user = QueueMemberUserRelation(builder)
        self.queue_extension = QueueExtensionRelation(builder)
        self.queue_fallback = QueueFallbackRelation(builder)
        self.queue_schedule = QueueScheduleRelation(builder)

    @extract_id
    def add_extension(self, extension_id):
        return self.queue_extension.associate(self.queue_id, extension_id)

    @extract_id
    def remove_extension(self, extension_id):
        return self.queue_extension.dissociate(self.queue_id, extension_id)

    def update_fallbacks(self, fallbacks):
        self.queue_fallback.update_fallbacks(self.queue_id, fallbacks)

    def list_fallbacks(self):
        return self.queue_fallback.list_fallbacks(self.queue_id)

    @extract_id
    def add_schedule(self, schedule_id):
        return self.queue_schedule.associate(self.queue_id, schedule_id)

    @extract_id
    def remove_schedule(self, schedule_id):
        return self.queue_schedule.dissociate(self.queue_id, schedule_id)

    @extract_id
    def add_agent_member(self, agent_id, **kwargs):
        return self.queue_member_agent.associate(self.queue_id, agent_id, **kwargs)

    @extract_id
    def remove_agent_member(self, agent_id):
        return self.queue_member_agent.dissociate(self.queue_id, agent_id)

    @extract_id
    def add_user_member(self, user_uuid, **kwargs):
        return self.queue_member_user.associate(self.queue_id, user_uuid, **kwargs)

    @extract_id
    def remove_user_member(self, user_uuid):
        return self.queue_member_user.dissociate(self.queue_id, user_uuid)


class QueuesCommand(MultiTenantCommand):
    resource = 'queues'
    relation_cmd = QueueRelation

----------------------------------------

File: commands/queues_general.py
Please review for update

# Copyright 2023 Accent Communications

from accent_lib_rest_client import RESTCommand


class QueuesGeneralCommand(RESTCommand):
    resource = 'asterisk/queues/general'

    def get(self):
        response = self.session.get(self.resource)
        return response.json()

    def update(self, body):
        self.session.put(self.resource, body)

----------------------------------------

File: commands/registers_iax.py
Please review for update

# Copyright 2023 Accent Communications

from accent_confd_client.crud import CRUDCommand


class RegistersIAXCommand(CRUDCommand):
    resource = 'registers/iax'

----------------------------------------

File: commands/registers_sip.py
Please review for update

# Copyright 2023 Accent Communications

from accent_confd_client.crud import CRUDCommand


class RegistersSipCommand(CRUDCommand):
    resource = 'registers/sip'

----------------------------------------

File: commands/registrars.py
Please review for update

# Copyright 2023 Accent Communications

from accent_confd_client.crud import CRUDCommand


class RegistrarsCommand(CRUDCommand):
    resource = 'registrars'

----------------------------------------

File: commands/rtp_general.py
Please review for update

# Copyright 2023 Accent Communications

from accent_lib_rest_client import RESTCommand


class RTPGeneralCommand(RESTCommand):
    resource = 'asterisk/rtp/general'

    def get(self):
        response = self.session.get(self.resource)
        return response.json()

    def update(self, body):
        self.session.put(self.resource, body)

----------------------------------------

File: commands/rtp_ice_host_candidates.py
Please review for update

# Copyright 2023 Accent Communications

from accent_lib_rest_client import RESTCommand


class RTPIceHostCandidatesCommand(RESTCommand):
    resource = 'asterisk/rtp/ice_host_candidates'

    def get(self):
        response = self.session.get(self.resource)
        return response.json()

    def update(self, body):
        self.session.put(self.resource, body)

----------------------------------------

File: commands/sccp_general.py
Please review for update

# Copyright 2023 Accent Communications

from accent_lib_rest_client import RESTCommand


class SCCPGeneralCommand(RESTCommand):
    resource = 'asterisk/sccp/general'

    def get(self):
        response = self.session.get(self.resource)
        return response.json()

    def update(self, body):
        self.session.put(self.resource, body)

----------------------------------------

File: commands/schedules.py
Please review for update

# Copyright 2023 Accent Communications

from accent_confd_client.crud import MultiTenantCommand


class SchedulesCommand(MultiTenantCommand):
    resource = 'schedules'

----------------------------------------

File: commands/sip_transports.py
Please review for update

# Copyright 2023 Accent Communications

from accent_confd_client.crud import CRUDCommand


class SIPTransportsCommand(CRUDCommand):
    resource = 'sip/transports'

----------------------------------------

File: commands/skill_rules.py
Please review for update

# Copyright 2023 Accent Communications

from accent_confd_client.crud import MultiTenantCommand


class SkillRulesCommand(MultiTenantCommand):
    resource = 'queues/skillrules'

----------------------------------------

File: commands/skills.py
Please review for update

# Copyright 2023 Accent Communications

from accent_confd_client.crud import MultiTenantCommand


class SkillsCommand(MultiTenantCommand):
    resource = 'agents/skills'

----------------------------------------

File: commands/sounds.py
Please review for update

# Copyright 2023 Accent Communications

from urllib.parse import quote

from accent_confd_client.crud import MultiTenantCommand
from accent_confd_client.util import extract_id, url_join


class SoundsCommand(MultiTenantCommand):
    resource = 'sounds'

    def get(self, category, tenant_uuid=None):
        tenant_uuid = tenant_uuid or self._client.tenant_uuid
        headers = dict(self.session.READ_HEADERS)
        if tenant_uuid:
            headers['Accent-Tenant'] = tenant_uuid

        url = url_join(self.resource, category)
        response = self.session.get(url, headers=headers)
        return response.json()

    def delete(self, category, tenant_uuid=None):
        tenant_uuid = tenant_uuid or self._client.tenant_uuid
        headers = dict(self.session.READ_HEADERS)
        if tenant_uuid:
            headers['Accent-Tenant'] = tenant_uuid

        url = url_join(self.resource, category)
        self.session.delete(url, headers=headers)

    @extract_id
    def download_file(self, category, filename, **kwargs):
        tenant_uuid = kwargs.pop('tenant_uuid', None) or self._client.tenant_uuid
        headers = {'Accept': '*/*'}
        if tenant_uuid:
            headers['Accent-Tenant'] = tenant_uuid
        url = url_join(self.resource, category, 'files', quote(filename, safe=''))
        response = self.session.get(url, headers=headers, params=kwargs)
        return response

    @extract_id
    def upload_file(self, category, filename, content, **kwargs):
        tenant_uuid = kwargs.pop('tenant_uuid', None) or self._client.tenant_uuid
        headers = {'Content-Type': 'application/octet-stream'}
        if tenant_uuid:
            headers['Accent-Tenant'] = tenant_uuid
        url = url_join(self.resource, category, 'files', filename)
        self.session.put(url, raw=content, headers=headers, params=kwargs)

    @extract_id
    def delete_file(self, category, filename, **kwargs):
        tenant_uuid = kwargs.pop('tenant_uuid', None) or self._client.tenant_uuid
        headers = {}
        if tenant_uuid:
            headers['Accent-Tenant'] = tenant_uuid
        url = url_join(self.resource, category, 'files', filename)
        self.session.delete(url, headers=headers, params=kwargs)

----------------------------------------

File: commands/sounds_languages.py
Please review for update

# Copyright 2023 Accent Communications

from accent_lib_rest_client import RESTCommand

from accent_confd_client.util import url_join


class SoundsLanguagesCommand(RESTCommand):
    resource = 'sounds/languages'

    def list(self):
        url = url_join(self.resource)
        response = self.session.get(url)
        return response.json()

----------------------------------------

File: commands/status.py
Please review for update

# Copyright 2023 Accent Communications

from accent_lib_rest_client import HTTPCommand


class StatusCommand(HTTPCommand):
    def __call__(self):
        return self.get()

    def get(self):
        r = self.session.get('/status')

        return r.json()

----------------------------------------

File: commands/switchboards.py
Please review for update

# Copyright 2023 Accent Communications

from accent_confd_client.crud import MultiTenantCommand
from accent_confd_client.relations import (
    SwitchboardFallbackRelation,
    SwitchboardMemberUserRelation,
)


class SwitchboardRelation:
    def __init__(self, builder, switchboard_id):
        self.switchboard_id = switchboard_id
        self.switchboard_user_members = SwitchboardMemberUserRelation(builder)
        self.switchboard_fallback = SwitchboardFallbackRelation(builder)

    def update_user_members(self, users):
        return self.switchboard_user_members.associate(self.switchboard_id, users)

    def update_fallbacks(self, fallbacks):
        self.switchboard_fallback.update_fallbacks(self.switchboard_id, fallbacks)

    def list_fallbacks(self):
        return self.switchboard_fallback.list_fallbacks(self.switchboard_id)


class SwitchboardsCommand(MultiTenantCommand):
    resource = 'switchboards'
    relation_cmd = SwitchboardRelation

----------------------------------------

File: commands/tenants.py
Please review for update

# Copyright 2023 Accent Communications

from accent_confd_client.crud import MultiTenantCommand


class TenantsCommand(MultiTenantCommand):
    resource = 'tenants'

----------------------------------------

File: commands/tests/__init__.py
Please review for update


----------------------------------------

File: commands/tests/test_call_logs.py
Please review for update

# Copyright 2023 Accent Communications

from datetime import datetime

from hamcrest import assert_that, equal_to
from accent_lib_rest_client.tests.command import RESTCommandTestCase

from ..call_logs import CallLogsCommand


class TestCallLogs(RESTCommandTestCase):
    Command = CallLogsCommand

    csvdata = (
        "Call Date,Caller,Called,Period,user Field\r\n"
        "2015-06-29T12:01:00.725871,John (1000),1234567890,0,\r\n"
    )
    resource = 'call_logs'

    def test_list(self):
        self.session.get.return_value = self.new_response(200, body=self.csvdata)

        result = self.command.list()

        self.session.get.assert_called_once_with(
            self.resource, params={}, headers={'Accept': 'text/csv'}
        )
        assert_that(result, equal_to(self.csvdata))

    def test_list_with_dates(self):
        self.session.get.return_value = self.new_response(200, body=self.csvdata)

        expected_params = {
            'start_date': '2015-01-01T12:13:14',
            'end_date': '2015-01-02T12:13:14',
        }

        self.command.list(
            start_date=datetime(2015, 1, 1, 12, 13, 14),
            end_date=datetime(2015, 1, 2, 12, 13, 14),
        )

        self.session.get.assert_called_once_with(
            self.resource, params=expected_params, headers={'Accept': 'text/csv'}
        )

    def test_when_not_200(self):
        self.session.get.return_value = self.new_response(404)

        self.assertRaisesHTTPError(self.command.list)

----------------------------------------

File: commands/tests/test_configuration.py
Please review for update

# Copyright 2023 Accent Communications

from hamcrest import assert_that, has_entry

from accent_confd_client.tests import TestCommand

from ..configuration import ConfigurationCommand


class TestInfos(TestCommand):
    Command = ConfigurationCommand

    def test_get(self):
        self.set_response('get', 200, {'enabled': True})

        result = self.command.live_reload.get()

        self.session.get.assert_called_once_with('/configuration/live_reload')
        assert_that(result, has_entry('enabled', True))

    def test_calling_infos_with_no_method(self):
        self.set_response('put', 204)

        self.command.live_reload.update({'enabled': True})

        self.session.put.assert_called_once_with(
            '/configuration/live_reload', {'enabled': True}
        )

----------------------------------------

File: commands/tests/test_devices.py
Please review for update

# Copyright 2023 Accent Communications

from hamcrest import assert_that, equal_to

from accent_confd_client.tests import TestCommand

from ..devices import DevicesCommand, UnallocatedDevicesCommand


class TestDevices(TestCommand):
    Command = DevicesCommand

    def test_autoprov(self):
        device_id = "a1b2c3d4e5f6g7h8i9j0k1l2"
        expected_url = f"/devices/{device_id}/autoprov"
        expected_headers = {
            'Accept': 'application/json',
        }
        self.client.tenant_uuid = None
        self.set_response('get', 204)

        self.command.autoprov(device_id)

        self.session.get.assert_called_once_with(expected_url, headers=expected_headers)

    def test_autoprov_with_tenant(self):
        device_id = "a1b2c3d4e5f6g7h8i9j0k1l2"
        expected_url = f"/devices/{device_id}/autoprov"
        expected_headers = {
            'Accept': 'application/json',
            'Accent-Tenant': 'tenant',
        }
        self.client.tenant_uuid = 'tenant'
        self.set_response('get', 204)

        self.command.autoprov(device_id)

        self.session.get.assert_called_once_with(expected_url, headers=expected_headers)

    def test_synchronize(self):
        device_id = "a1b2c3d4e5f6g7h8i9j0k1l2"
        expected_url = f"/devices/{device_id}/synchronize"
        expected_headers = {
            'Accept': 'application/json',
        }
        self.client.tenant_uuid = None
        self.set_response('get', 204)

        self.command.synchronize(device_id)

        self.session.get.assert_called_once_with(expected_url, headers=expected_headers)

    def test_synchronize_with_tenants(self):
        device_id = "a1b2c3d4e5f6g7h8i9j0k1l2"
        expected_url = f"/devices/{device_id}/synchronize"
        expected_headers = {
            'Accept': 'application/json',
            'Accent-Tenant': 'tenant',
        }
        self.client.tenant_uuid = 'tenant'
        self.set_response('get', 204)

        self.command.synchronize(device_id)

        self.session.get.assert_called_once_with(expected_url, headers=expected_headers)


class TestUnallocatedDevices(TestCommand):
    Command = UnallocatedDevicesCommand

    def test_unallocated_listing(self):
        expected_url = "/devices/unallocated"
        self.client.tenant_uuid = None
        expected_response = self.set_response(
            'get', 200, {"total": 2, "items": [{"device": {}}, {"device": {}}]}
        )

        result = self.command.list(search='term')
        assert_that(result, equal_to(expected_response))

        self.session.get.assert_called_once_with(
            expected_url, params={'search': 'term'}
        )

    def test_assign_tenant(self):
        device_id = 'a1b2c3d4e5f6g7h8i9j0k1l9'
        expected_url = f"/devices/unallocated/{device_id}"
        expected_headers = {
            'Accept': 'application/json',
            'Content-Type': 'application/json',
            'Accent-Tenant': 'tenant',
        }
        self.client.tenant_uuid = 'tenant'
        self.set_response('put', 204)

        self.command.assign_tenant(device_id)
        self.session.put.assert_called_once_with(expected_url, headers=expected_headers)

----------------------------------------

File: commands/tests/test_funckeys.py
Please review for update

# Copyright 2023 Accent Communications

from hamcrest import assert_that, equal_to, none

from accent_confd_client.tests import TestCommand

from ..funckeys import FuncKeysCommand


class TestFuncKeys(TestCommand):
    Command = FuncKeysCommand

    def test_get_template_funckey(self):
        template_id = 2
        position = 1
        expected_url = f"/funckeys/templates/{template_id}/{position}"
        expected_content = {
            'blf': True,
            'destination': {'exten': '1234', 'href': None, 'type': 'custom'},
            'id': 32,
            'inherited': True,
            'label': 'pouet',
            'links': [],
        }

        self.set_response('get', 200, expected_content)

        result = self.command.get_template_funckey(template_id, position)

        self.session.get.assert_called_once_with(expected_url)
        assert_that(result, equal_to(expected_content))

    def test_delete_template_funckey(self):
        template_id = 2
        position = 1
        expected_url = f"/funckeys/templates/{template_id}/{position}"

        self.set_response('delete', 204)

        result = self.command.delete_template_funckey(template_id, position)

        self.session.delete.assert_called_once_with(expected_url)
        assert_that(result, none())

    def test_update_template_funckey(self):
        template_id = 2
        position = 1
        expected_url = f"/funckeys/templates/{template_id}/{position}"
        funckey = {'blf': False}

        self.set_response('put', 204)

        result = self.command.update_template_funckey(template_id, position, funckey)

        self.session.put.assert_called_once_with(expected_url, funckey)
        assert_that(result, none())

----------------------------------------

File: commands/tests/test_infos.py
Please review for update

# Copyright 2023 Accent Communications

from hamcrest import assert_that, equal_to

from accent_confd_client.tests import TestCommand

from ..infos import InfosCommand


class TestInfos(TestCommand):
    Command = InfosCommand

    def test_get(self):
        self.set_response('get', 200, {'uuid': 'test'})

        result = self.command.get()

        self.session.get.assert_called_once_with('/infos')
        assert_that(result, equal_to({'uuid': 'test'}))

    def test_calling_infos_with_no_method(self):
        self.set_response('get', 200, {'uuid': 'test'})

        result = self.command()

        self.session.get.assert_called_once_with('/infos')
        assert_that(result, equal_to({'uuid': 'test'}))

----------------------------------------

File: commands/tests/test_users.py
Please review for update

# Copyright 2023 Accent Communications

from unittest import TestCase
from unittest.mock import ANY, Mock

from hamcrest import assert_that, equal_to

from accent_confd_client.tests import TestCommand

from ..users import UserRelation, UsersCommand

FAKE_UUID = '00000000-aaaa-1111-bbbb-222222222222'


class TestUsers(TestCommand):
    Command = UsersCommand

    def test_import_csv(self):
        csvdata = "firstname\nToto\n"
        expected_content = {'created': [{'user_id': 1}]}
        expected_url = "/users/import"
        expected_headers = {
            'Content-Type': 'text/csv; charset=utf-8',
            'Accent-Tenant': ANY,
        }

        self.set_response('post', 204, expected_content)

        self.command.import_csv(csvdata)

        self.session.post.assert_called_once_with(
            expected_url,
            raw=csvdata,
            check_response=False,
            timeout=300,
            headers=expected_headers,
        )

    def test_update_csv(self):
        csvdata = "firstname\nToto\n"
        expected_content = {'updated': [{'user_id': 1}]}
        expected_url = "/users/import"
        expected_headers = {'Content-Type': 'text/csv; charset=utf-8'}

        self.set_response('put', 204, expected_content)

        self.command.update_csv(csvdata)

        self.session.put.assert_called_once_with(
            expected_url,
            raw=csvdata,
            check_response=False,
            timeout=300,
            headers=expected_headers,
        )

    def test_export_csv(self):
        expected_url = "/users/export"
        expected_content = "firstname\nToto\n"

        self.set_response('get', 200, content=expected_content)

        result = self.command.export_csv()

        assert_that(result, equal_to(expected_content))
        self.session.get.assert_called_once_with(
            expected_url,
            headers={'Accept': 'text/csv; charset=utf-8', 'Accent-Tenant': ANY},
        )

    def test_main_endpoint_sip(self):
        expected_url = f"/users/{FAKE_UUID}/lines/main/associated/endpoints/sip"
        expected_content = {"username": 'tata'}

        self.set_response('get', 200, json=expected_content)

        result = self.command.get_main_endpoint_sip(FAKE_UUID)

        assert_that(result, equal_to(expected_content))
        self.session.get.assert_called_once_with(expected_url, params={})


class TestUserRelation(TestCase):
    def test_get_funckey(self):
        user_id = 34
        position = 1

        relation = UserRelation(Mock(), user_id)
        relation.user_funckey = Mock()

        relation.get_funckey(position)

        relation.user_funckey.get_funckey.assert_called_once_with(user_id, position)

----------------------------------------

File: commands/tests/test_wizard.py
Please review for update

# Copyright 2023 Accent Communications

from accent_confd_client.tests import TestCommand

from ..wizard import WizardCommand


class TestWizard(TestCommand):
    Command = WizardCommand

    def test_create(self):
        body = {'admin_password': 'password', 'etc': '...'}

        expected_content = {'accent_uuid': 'UUID'}
        expected_url = "/wizard"

        self.set_response('post', 204, expected_content)

        self.command.create(body, timeout=600)

        self.session.post.assert_called_once_with(expected_url, body, timeout=600)

    def test_get(self):
        expected_content = {'configured': False}
        expected_url = "/wizard"
        self.set_response('get', 200, expected_content)

        self.command.get()

        self.session.get.assert_called_once_with(expected_url)

    def test_discover(self):
        expected_url = "/wizard/discover"
        expected_content = {'hostname': 'accent', 'etc': '...'}

        self.set_response('get', 200, expected_content)

        self.command.discover()

        self.session.get.assert_called_once_with(expected_url)

----------------------------------------

File: commands/timezones.py
Please review for update

# Copyright 2023 Accent Communications

from accent_lib_rest_client import RESTCommand

from accent_confd_client.util import url_join


class TimezonesCommand(RESTCommand):
    resource = 'timezones'

    def list(self):
        url = url_join(self.resource)
        response = self.session.get(url)
        return response.json()

----------------------------------------

File: commands/trunks.py
Please review for update

# Copyright 2023 Accent Communications

from accent_confd_client.crud import MultiTenantCommand
from accent_confd_client.relations import (
    TrunkEndpointCustomRelation,
    TrunkEndpointIAXRelation,
    TrunkEndpointSipRelation,
    TrunkRegisterIAXRelation,
    TrunkRegisterSipRelation,
)
from accent_confd_client.util import extract_id


class TrunkRelation:
    def __init__(self, builder, trunk_id):
        self.trunk_id = trunk_id
        self.trunk_endpoint_sip = TrunkEndpointSipRelation(builder)
        self.trunk_endpoint_iax = TrunkEndpointIAXRelation(builder)
        self.trunk_endpoint_custom = TrunkEndpointCustomRelation(builder)
        self.trunk_register_iax = TrunkRegisterIAXRelation(builder)
        self.trunk_register_sip = TrunkRegisterSipRelation(builder)

    @extract_id
    def add_endpoint_sip(self, endpoint_sip_id):
        return self.trunk_endpoint_sip.associate(self.trunk_id, endpoint_sip_id)

    @extract_id
    def remove_endpoint_sip(self, endpoint_sip_id):
        return self.trunk_endpoint_sip.dissociate(self.trunk_id, endpoint_sip_id)

    @extract_id
    def add_endpoint_iax(self, endpoint_iax_id):
        return self.trunk_endpoint_iax.associate(self.trunk_id, endpoint_iax_id)

    @extract_id
    def remove_endpoint_iax(self, endpoint_iax_id):
        return self.trunk_endpoint_iax.dissociate(self.trunk_id, endpoint_iax_id)

    @extract_id
    def add_endpoint_custom(self, endpoint_custom_id):
        return self.trunk_endpoint_custom.associate(self.trunk_id, endpoint_custom_id)

    @extract_id
    def remove_endpoint_custom(self, endpoint_custom_id):
        return self.trunk_endpoint_custom.dissociate(self.trunk_id, endpoint_custom_id)

    @extract_id
    def add_register_sip(self, register_sip_id):
        return self.trunk_register_sip.associate(self.trunk_id, register_sip_id)

    @extract_id
    def remove_register_sip(self, register_sip_id):
        return self.trunk_register_sip.dissociate(self.trunk_id, register_sip_id)

    @extract_id
    def add_register_iax(self, register_iax_id):
        return self.trunk_register_iax.associate(self.trunk_id, register_iax_id)

    @extract_id
    def remove_register_iax(self, register_iax_id):
        return self.trunk_register_iax.dissociate(self.trunk_id, register_iax_id)


class TrunksCommand(MultiTenantCommand):
    resource = 'trunks'
    relation_cmd = TrunkRelation

----------------------------------------

File: commands/users.py
Please review for update

# Copyright 2023 Accent Communications

from accent_confd_client.crud import MultiTenantCommand
from accent_confd_client.relations import (
    UserAgentRelation,
    UserCallPermissionRelation,
    UserEndpointSipRelation,
    UserExternalAppRelation,
    UserFallbackRelation,
    UserForwardRelation,
    UserFuncKeyRelation,
    UserGroupRelation,
    UserLineRelation,
    UserScheduleRelation,
    UserServiceRelation,
    UserVoicemailRelation,
)
from accent_confd_client.util import extract_id, extract_name, url_join


class UserRelation:
    def __init__(self, builder, user_id):
        self.user_id = user_id
        self.user_agent = UserAgentRelation(builder)
        self.user_call_permission = UserCallPermissionRelation(builder)
        self.user_endpoint_sip = UserEndpointSipRelation(builder)
        self.user_external_app = UserExternalAppRelation(builder)
        self.user_fallback = UserFallbackRelation(builder)
        self.user_forward = UserForwardRelation(builder)
        self.user_funckey = UserFuncKeyRelation(builder)
        self.user_group = UserGroupRelation(builder)
        self.user_line = UserLineRelation(builder)
        self.user_schedule = UserScheduleRelation(builder)
        self.user_service = UserServiceRelation(builder)
        self.user_voicemail = UserVoicemailRelation(builder)

    @extract_id
    def add_line(self, line_id):
        return self.user_line.associate(self.user_id, line_id)

    @extract_id
    def remove_line(self, line_id):
        self.user_line.dissociate(self.user_id, line_id)

    def update_lines(self, lines):
        return self.user_line.update_lines(self.user_id, lines)

    def get_endpoint_sip(self, line_id):
        return self.user_endpoint_sip.get_by_user_line(self.user_id, line_id)

    @extract_id
    def add_call_permission(self, call_permission_id):
        return self.user_call_permission.associate(self.user_id, call_permission_id)

    @extract_id
    def remove_call_permission(self, call_permission_id):
        self.user_call_permission.dissociate(self.user_id, call_permission_id)

    @extract_id
    def add_voicemail(self, voicemail_id):
        self.user_voicemail.associate(self.user_id, voicemail_id)

    def remove_voicemail(self):
        self.user_voicemail.dissociate(self.user_id)

    def get_voicemail(self):
        return self.user_voicemail.get_voicemail(self.user_id)

    @extract_id
    def add_agent(self, agent_id):
        self.user_agent.associate(self.user_id, agent_id)

    def remove_agent(self):
        self.user_agent.dissociate(self.user_id)

    def add_funckey(self, position, funckey):
        self.update_funckey(position, funckey)

    def update_funckey(self, position, funckey):
        self.user_funckey.update_funckey(self.user_id, position, funckey)

    def remove_funckey(self, position):
        self.user_funckey.remove_funckey(self.user_id, position)

    def get_funckey(self, position):
        return self.user_funckey.get_funckey(self.user_id, position)

    def list_funckeys(self):
        return self.user_funckey.list_funckeys(self.user_id)

    def update_funckeys(self, funckeys):
        self.user_funckey.update_funckeys(self.user_id, funckeys)

    @extract_id
    def add_funckey_template(self, template_id):
        self.user_funckey.associate_funckey_template(self.user_id, template_id)

    @extract_id
    def remove_funckey_template(self, template_id):
        self.user_funckey.dissociate_funckey_template(self.user_id, template_id)

    def update_service(self, service_name, service):
        self.user_service.update_service(self.user_id, service_name, service)

    def get_service(self, service_name):
        return self.user_service.get_service(self.user_id, service_name)

    def list_services(self):
        return self.user_service.list_services(self.user_id)

    def update_services(self, body):
        return self.user_service.update_services(self.user_id, body)

    def update_forward(self, forward_name, forward):
        self.user_forward.update_forward(self.user_id, forward_name, forward)

    def get_forward(self, forward_name):
        return self.user_forward.get_forward(self.user_id, forward_name)

    def list_forwards(self):
        return self.user_forward.list_forwards(self.user_id)

    def update_forwards(self, body):
        return self.user_forward.update_forwards(self.user_id, body)

    def update_fallbacks(self, fallbacks):
        self.user_fallback.update_fallbacks(self.user_id, fallbacks)

    def list_fallbacks(self):
        return self.user_fallback.list_fallbacks(self.user_id)

    def update_groups(self, groups):
        return self.user_group.associate(self.user_id, groups)

    @extract_id
    def add_schedule(self, schedule_id):
        return self.user_schedule.associate(self.user_id, schedule_id)

    @extract_id
    def remove_schedule(self, schedule_id):
        return self.user_schedule.dissociate(self.user_id, schedule_id)

    def list_external_apps(self, **kwargs):
        return self.user_external_app.list(self.user_id, **kwargs)

    @extract_name(pass_original=True)
    def create_external_app(self, name, body):
        return self.user_external_app.create(self.user_id, name, body)

    @extract_name(pass_original=True)
    def update_external_app(self, name, body):
        self.user_external_app.update(self.user_id, name, body)

    @extract_name()
    def get_external_app(self, name):
        return self.user_external_app.get(self.user_id, name)

    @extract_name()
    def delete_external_app(self, name):
        self.user_external_app.delete(self.user_id, name)


class UsersCommand(MultiTenantCommand):
    resource = 'users'
    relation_cmd = UserRelation

    def import_csv(self, csvdata, encoding='utf-8', timeout=300, tenant_uuid=None):
        url = url_join(self.resource, "import")
        headers = {'Content-Type': f'text/csv; charset={encoding}'}
        tenant_uuid = tenant_uuid or self._client.tenant_uuid
        if tenant_uuid:
            headers['Accent-Tenant'] = tenant_uuid

        response = self.session.post(
            url, raw=csvdata, check_response=False, timeout=timeout, headers=headers
        )
        return response.json()

    def update_csv(self, csvdata, encoding='utf-8', timeout=300):
        url = url_join(self.resource, "import")
        headers = {'Content-Type': f'text/csv; charset={encoding}'}
        response = self.session.put(
            url, raw=csvdata, check_response=False, timeout=timeout, headers=headers
        )
        return response.json()

    def export_csv(self, tenant_uuid=None):
        url = url_join(self.resource, "export")
        headers = {'Accept': 'text/csv; charset=utf-8'}
        tenant_uuid = tenant_uuid or self._client.tenant_uuid
        if tenant_uuid:
            headers['Accent-Tenant'] = tenant_uuid

        response = self.session.get(url, headers=headers)
        return response.content

    def get_main_endpoint_sip(self, user_uuid, view=None):
        url = url_join(self.resource, user_uuid, "lines/main/associated/endpoints/sip")
        params = {}
        if view:
            params['view'] = view
        response = self.session.get(url, params=params)
        return response.json()

    def exist(self, user_uuid):
        url = url_join(self.resource, user_uuid)
        response = self.session.head(url, check_response=False)
        if response.status_code == 404:
            return False
        self.session.check_response(response)
        return True

----------------------------------------

File: commands/voicemail_general.py
Please review for update

# Copyright 2023 Accent Communications

from accent_lib_rest_client import RESTCommand


class VoicemailGeneralCommand(RESTCommand):
    resource = 'asterisk/voicemail/general'

    def get(self):
        response = self.session.get(self.resource)
        return response.json()

    def update(self, body):
        self.session.put(self.resource, body)

----------------------------------------

File: commands/voicemail_zonemessages.py
Please review for update

# Copyright 2023 Accent Communications


from accent_lib_rest_client import RESTCommand


class VoicemailZoneMessagesCommand(RESTCommand):
    resource = 'asterisk/voicemail/zonemessages'

    def get(self):
        response = self.session.get(self.resource)
        return response.json()

    def update(self, body):
        self.session.put(self.resource, body)

----------------------------------------

File: commands/voicemails.py
Please review for update

# Copyright 2023 Accent Communications

from accent_confd_client.crud import MultiTenantCommand
from accent_confd_client.relations import UserVoicemailRelation
from accent_confd_client.util import extract_id


class VoicemailRelation:
    def __init__(self, builder, voicemail_id):
        self.voicemail_id = voicemail_id
        self.user_voicemail_relation = UserVoicemailRelation(builder)

    @extract_id
    def add_user(self, user_id):
        self.user_voicemail_relation.associate(user_id, self.voicemail_id)

    @extract_id
    def remove_user(self, user_id):
        self.user_voicemail_relation.dissociate(user_id)

    def remove_users(self):
        for user in self.user_voicemail_relation.list_users(self.voicemail_id):
            self.user_voicemail_relation.dissociate(user['uuid'])


class VoicemailsCommand(MultiTenantCommand):
    resource = 'voicemails'

    relation_cmd = VoicemailRelation

----------------------------------------

File: commands/wait_until_ready.py
Please review for update

# Copyright 2023 Accent Communications

import time

from requests import HTTPError, RequestException
from accent_lib_rest_client import HTTPCommand

from accent_confd_client.util import url_join


class WaitUntilReadyCommand(HTTPCommand):
    resource = 'infos'

    def __call__(self, retry=20, delay=0.2):
        url = url_join(self.resource)
        for n in range(retry):
            try:
                self.session.get(url, check_response=False)
                return
            except HTTPError as e:
                response = getattr(e, 'response', None)
                if not response:
                    raise
                status_code = getattr(response, 'status_code', None)
                if status_code == '401':
                    return
                raise
            except RequestException:
                if n < retry - 1:
                    time.sleep(delay)
                else:
                    raise

----------------------------------------

File: commands/wizard.py
Please review for update

# Copyright 2023 Accent Communications

from accent_lib_rest_client import HTTPCommand

from accent_confd_client.util import url_join


class WizardCommand(HTTPCommand):
    resource = 'wizard'

    def create(self, body, timeout=300):
        url = url_join(self.resource)
        response = self.session.post(url, body, timeout=timeout)
        return response.json()

    def get(self):
        url = url_join(self.resource)
        response = self.session.get(url)
        return response.json()

    def discover(self):
        url = url_join(self.resource, "discover")
        response = self.session.get(url)
        return response.json()

    def __call__(self):
        return self.get()

----------------------------------------

File: crud.py
Please review for update

# Copyright 2023 Accent Communications

import abc

from accent_lib_rest_client import HTTPCommand

from accent_confd_client.util import extract_id, url_join


class CRUDCommand(HTTPCommand):
    __metaclass__ = abc.ABCMeta

    @abc.abstractproperty
    def resource(self):
        return

    @property
    def relation_cmd(self):
        raise NotImplementedError("Command needs to implement an Associatior")

    def list(self, **kwargs):
        url = url_join(self.resource)
        response = self.session.get(url, params=kwargs)
        return response.json()

    @extract_id
    def get(self, resource_id):
        url = url_join(self.resource, resource_id)
        response = self.session.get(url)
        return response.json()

    def create(self, body):
        url = url_join(self.resource)
        response = self.session.post(url, body)
        return response.json()

    def update(self, body):
        resource_id = body.get('uuid')
        if not resource_id:
            resource_id = body['id']
        url = url_join(self.resource, resource_id)
        body = {key: value for key, value in body.items() if key != "links"}
        self.session.put(url, body)

    @extract_id
    def delete(self, resource_id):
        url = url_join(self.resource, resource_id)
        self.session.delete(url)

    @extract_id
    def relations(self, resource_id):
        return self.relation_cmd(self._client, resource_id)

    def __call__(self, resource):
        return self.relations(resource)


class MultiTenantCommand(CRUDCommand):
    def list(self, **kwargs):
        kwargs.setdefault('recurse', False)
        tenant_uuid = kwargs.pop('tenant_uuid', self._client.tenant_uuid)
        headers = dict(kwargs.get('headers', self.session.READ_HEADERS))
        if tenant_uuid:
            headers['Accent-Tenant'] = tenant_uuid

        url = url_join(self.resource)
        response = self.session.get(url, headers=headers, params=kwargs)
        return response.json()

    @extract_id
    def get(self, resource_id, **kwargs):
        tenant_uuid = kwargs.pop('tenant_uuid', None)
        headers = dict(self.session.READ_HEADERS)
        if tenant_uuid:
            headers['Accent-Tenant'] = tenant_uuid

        url = url_join(self.resource, resource_id)
        response = self.session.get(url, headers=headers, params=kwargs)
        return response.json()

    def create(self, body, **kwargs):
        tenant_uuid = kwargs.pop('tenant_uuid', self._client.tenant_uuid)
        headers = dict(kwargs.get('headers', self.session.WRITE_HEADERS))
        if tenant_uuid:
            headers['Accent-Tenant'] = tenant_uuid

        url = url_join(self.resource)
        response = self.session.post(url, body, headers=headers)
        return response.json()

----------------------------------------

File: relations.py
Please review for update

# Copyright 2023 Accent Communications

from accent_lib_rest_client import HTTPCommand

from accent_confd_client.util import url_join


class UserLineRelation(HTTPCommand):
    def associate(self, user_id, line_id):
        url = url_join('users', user_id, 'lines', line_id)
        self.session.put(url)

    def dissociate(self, user_id, line_id):
        url = url_join('users', user_id, 'lines', line_id)
        self.session.delete(url)

    def update_lines(self, user_id, lines):
        url = url_join('users', user_id, 'lines')
        body = {'lines': [{'id': line['id']} for line in lines]}
        self.session.put(url, body)


class UserEndpointSipRelation(HTTPCommand):
    def get_by_user_line(self, user_uuid, line_id, view=None):
        url = url_join(
            'users', user_uuid, 'lines', line_id, 'associated', 'endpoints', 'sip'
        )
        params = {}
        if view:
            params['view'] = view
        response = self.session.get(url, params=params)
        return response.json()


class UserVoicemailRelation(HTTPCommand):
    def associate(self, user_id, voicemail_id):
        url = url_join('users', user_id, 'voicemails', voicemail_id)
        self.session.put(url)

    def dissociate(self, user_id):
        url = url_join('users', user_id, 'voicemails')
        self.session.delete(url)

    def list_users(self, voicemail_id):
        url = url_join('voicemails', voicemail_id)
        response = self.session.get(url)
        return response.json()['users']

    def get_voicemail(self, user_id):
        url = url_join('users', user_id, 'voicemails')
        response = self.session.get(url)
        voicemails = response.json()['items']
        return voicemails[0] if voicemails else None


class UserAgentRelation(HTTPCommand):
    def associate(self, user_id, agent_id):
        url = url_join('users', user_id, 'agents', agent_id)
        self.session.put(url)

    def dissociate(self, user_id):
        url = url_join('users', user_id, 'agents')
        self.session.delete(url)


class LineDeviceRelation(HTTPCommand):
    def associate(self, line_id, device_id):
        url = url_join('lines', line_id, 'devices', device_id)
        self.session.put(url)

    def dissociate(self, line_id, device_id):
        url = url_join('lines', line_id, 'devices', device_id)
        self.session.delete(url)

    def get_by_line(self, line_id):
        url = url_join('lines', line_id, 'devices')
        response = self.session.get(url)
        return response.json()

    def list_by_device(self, device_id):
        url = url_join('devices', device_id, 'lines')
        response = self.session.get(url)
        return response.json()


class LineApplicationRelation(HTTPCommand):
    def associate(self, line_id, application_uuid):
        url = url_join('lines', line_id, 'applications', application_uuid)
        self.session.put(url)

    def dissociate(self, line_id, application_uuid):
        url = url_join('lines', line_id, 'applications', application_uuid)
        self.session.delete(url)


class LineExtensionRelation(HTTPCommand):
    def associate(self, line_id, extension_id):
        url = url_join('lines', line_id, 'extensions', extension_id)
        self.session.put(url)

    def dissociate(self, line_id, extension_id):
        url = url_join('lines', line_id, 'extensions', extension_id)
        self.session.delete(url)


class LineEndpointSipRelation(HTTPCommand):
    def associate(self, line_id, sip_id):
        url = url_join('lines', line_id, 'endpoints', 'sip', sip_id)
        self.session.put(url)

    def dissociate(self, line_id, sip_id):
        url = url_join('lines', line_id, 'endpoints', 'sip', sip_id)
        self.session.delete(url)


class LineEndpointSccpRelation(HTTPCommand):
    def associate(self, line_id, sccp_id):
        url = url_join('lines', line_id, 'endpoints', 'sccp', sccp_id)
        self.session.put(url)

    def dissociate(self, line_id, sccp_id):
        url = url_join('lines', line_id, 'endpoints', 'sccp', sccp_id)
        self.session.delete(url)


class LineEndpointCustomRelation(HTTPCommand):
    def associate(self, line_id, custom_id):
        url = url_join('lines', line_id, 'endpoints', 'custom', custom_id)
        self.session.put(url)

    def dissociate(self, line_id, custom_id):
        url = url_join('lines', line_id, 'endpoints', 'custom', custom_id)
        self.session.delete(url)


class UserFuncKeyRelation(HTTPCommand):
    def update_funckey(self, user_id, position, funckey):
        url = url_join('users', user_id, 'funckeys', position)
        self.session.put(url, funckey)

    def remove_funckey(self, user_id, position):
        url = url_join('users', user_id, 'funckeys', position)
        self.session.delete(url)

    def get_funckey(self, user_id, position):
        url = url_join('users', user_id, 'funckeys', position)
        response = self.session.get(url)
        return response.json()

    def list_funckeys(self, user_id):
        url = url_join('users', user_id, 'funckeys')
        response = self.session.get(url)
        return response.json()

    def update_funckeys(self, user_id, funckeys):
        url = url_join('users', user_id, 'funckeys')
        self.session.put(url, funckeys)

    def associate_funckey_template(self, user_id, template_id):
        url = url_join('users', user_id, 'funckeys', 'templates', template_id)
        self.session.put(url)

    def dissociate_funckey_template(self, user_id, template_id):
        url = url_join('users', user_id, 'funckeys', 'templates', template_id)
        self.session.delete(url)


class UserServiceRelation(HTTPCommand):
    def update_service(self, user_id, service_name, service):
        url = url_join('users', user_id, 'services', service_name)
        self.session.put(url, service)

    def get_service(self, user_id, service_name):
        url = url_join('users', user_id, 'services', service_name)
        response = self.session.get(url)
        return response.json()

    def list_services(self, user_id):
        url = url_join('users', user_id, 'services')
        response = self.session.get(url)
        return response.json()

    def update_services(self, user_id, services):
        url = url_join('users', user_id, 'services')
        self.session.put(url, services)


class UserForwardRelation(HTTPCommand):
    def update_forward(self, user_id, forward_name, forward):
        url = url_join('users', user_id, 'forwards', forward_name)
        self.session.put(url, forward)

    def get_forward(self, user_id, forward_name):
        url = url_join('users', user_id, 'forwards', forward_name)
        response = self.session.get(url)
        return response.json()

    def list_forwards(self, user_id):
        url = url_join('users', user_id, 'forwards')
        response = self.session.get(url)
        return response.json()

    def update_forwards(self, user_id, forwards):
        url = url_join('users', user_id, 'forwards')
        self.session.put(url, forwards)


class UserCallPermissionRelation(HTTPCommand):
    def associate(self, user_id, call_permission_id):
        url = url_join('users', user_id, 'callpermissions', call_permission_id)
        self.session.put(url)

    def dissociate(self, user_id, call_permission_id):
        url = url_join('users', user_id, 'callpermissions', call_permission_id)
        self.session.delete(url)


class UserEntityRelation(HTTPCommand):
    def get_by_user(self, user_id):
        url = url_join('users', user_id, 'entities')
        response = self.session.get(url)
        return response.json()


class TrunkEndpointSipRelation(HTTPCommand):
    def associate(self, trunk_id, sip_id):
        url = url_join('trunks', trunk_id, 'endpoints', 'sip', sip_id)
        self.session.put(url)

    def dissociate(self, trunk_id, sip_id):
        url = url_join('trunks', trunk_id, 'endpoints', 'sip', sip_id)
        self.session.delete(url)


class TrunkEndpointIAXRelation(HTTPCommand):
    def associate(self, trunk_id, iax_id):
        url = url_join('trunks', trunk_id, 'endpoints', 'iax', iax_id)
        self.session.put(url)

    def dissociate(self, trunk_id, iax_id):
        url = url_join('trunks', trunk_id, 'endpoints', 'iax', iax_id)
        self.session.delete(url)


class TrunkRegisterSipRelation(HTTPCommand):
    def associate(self, trunk_id, sip_id):
        url = url_join('trunks', trunk_id, 'registers', 'sip', sip_id)
        self.session.put(url)

    def dissociate(self, trunk_id, sip_id):
        url = url_join('trunks', trunk_id, 'registers', 'sip', sip_id)
        self.session.delete(url)


class TrunkRegisterIAXRelation(HTTPCommand):
    def associate(self, trunk_id, iax_id):
        url = url_join('trunks', trunk_id, 'registers', 'iax', iax_id)
        self.session.put(url)

    def dissociate(self, trunk_id, iax_id):
        url = url_join('trunks', trunk_id, 'registers', 'iax', iax_id)
        self.session.delete(url)


class TrunkEndpointCustomRelation(HTTPCommand):
    def associate(self, trunk_id, custom_id):
        url = url_join('trunks', trunk_id, 'endpoints', 'custom', custom_id)
        self.session.put(url)

    def dissociate(self, trunk_id, custom_id):
        url = url_join('trunks', trunk_id, 'endpoints', 'custom', custom_id)
        self.session.delete(url)


class IncallExtensionRelation(HTTPCommand):
    def associate(self, incall_id, extension_id):
        url = url_join('incalls', incall_id, 'extensions', extension_id)
        self.session.put(url)

    def dissociate(self, incall_id, extension_id):
        url = url_join('incalls', incall_id, 'extensions', extension_id)
        self.session.delete(url)


class OutcallTrunkRelation(HTTPCommand):
    def associate(self, outcall_id, trunks):
        url = url_join('outcalls', outcall_id, 'trunks')
        body = {'trunks': [{'id': trunk['id']} for trunk in trunks]}
        self.session.put(url, body)


class OutcallExtensionRelation(HTTPCommand):
    def associate(self, outcall_id, extension_id, **body):
        url = url_join('outcalls', outcall_id, 'extensions', extension_id)
        self.session.put(url, body)

    def dissociate(self, outcall_id, extension_id):
        url = url_join('outcalls', outcall_id, 'extensions', extension_id)
        self.session.delete(url)


class GroupExtensionRelation(HTTPCommand):
    def associate(self, group_id, extension_id):
        url = url_join('groups', group_id, 'extensions', extension_id)
        self.session.put(url)

    def dissociate(self, group_id, extension_id):
        url = url_join('groups', group_id, 'extensions', extension_id)
        self.session.delete(url)


class GroupMemberUserRelation(HTTPCommand):
    def associate(self, group_id, users):
        url = url_join('groups', group_id, 'members', 'users')
        body = {'users': []}
        for user in users:
            result = {'uuid': user['uuid']}
            if 'priority' in user:
                result['priority'] = user['priority']
            body['users'].append(result)
        self.session.put(url, body)


class GroupMemberExtensionRelation(HTTPCommand):
    def associate(self, group_id, extensions):
        url = url_join('groups', group_id, 'members', 'extensions')
        body = {'extensions': []}
        for extension in extensions:
            result = {'exten': extension['exten'], 'context': extension['context']}
            if 'priority' in extension:
                result['priority'] = extension['priority']
            body['extensions'].append(result)
        self.session.put(url, body)


class UserGroupRelation(HTTPCommand):
    def associate(self, user_id, groups):
        url = url_join('users', user_id, 'groups')
        body = {'groups': [{'id': group['id']} for group in groups]}
        self.session.put(url, body)


class GroupFallbackRelation(HTTPCommand):
    def list_fallbacks(self, group_id):
        url = url_join('groups', group_id, 'fallbacks')
        response = self.session.get(url)
        return response.json()

    def update_fallbacks(self, group_id, fallbacks):
        url = url_join('groups', group_id, 'fallbacks')
        self.session.put(url, fallbacks)


class UserFallbackRelation(HTTPCommand):
    def list_fallbacks(self, user_id):
        url = url_join('users', user_id, 'fallbacks')
        response = self.session.get(url)
        return response.json()

    def update_fallbacks(self, user_id, fallbacks):
        url = url_join('users', user_id, 'fallbacks')
        self.session.put(url, fallbacks)


class ConferenceExtensionRelation(HTTPCommand):
    def associate(self, conference_id, extension_id):
        url = url_join('conferences', conference_id, 'extensions', extension_id)
        self.session.put(url)

    def dissociate(self, conference_id, extension_id):
        url = url_join('conferences', conference_id, 'extensions', extension_id)
        self.session.delete(url)


class ParkingLotExtensionRelation(HTTPCommand):
    def associate(self, parking_lot_id, extension_id):
        url = url_join('parkinglots', parking_lot_id, 'extensions', extension_id)
        self.session.put(url)

    def dissociate(self, parking_lot_id, extension_id):
        url = url_join('parkinglots', parking_lot_id, 'extensions', extension_id)
        self.session.delete(url)


class PagingMemberUserRelation(HTTPCommand):
    def associate(self, paging_id, users):
        url = url_join('pagings', paging_id, 'members', 'users')
        body = {'users': [{'uuid': user['uuid']} for user in users]}
        self.session.put(url, body)


class PagingCallerUserRelation(HTTPCommand):
    def associate(self, paging_id, users):
        url = url_join('pagings', paging_id, 'callers', 'users')
        body = {'users': [{'uuid': user['uuid']} for user in users]}
        self.session.put(url, body)


class SwitchboardMemberUserRelation(HTTPCommand):
    def associate(self, switchboard_id, users):
        url = url_join('switchboards', switchboard_id, 'members', 'users')
        body = {'users': [{'uuid': user['uuid']} for user in users]}
        self.session.put(url, body)


class SwitchboardFallbackRelation(HTTPCommand):
    def list_fallbacks(self, switchboard_id):
        url = url_join('switchboards', switchboard_id, 'fallbacks')
        response = self.session.get(url)
        return response.json()

    def update_fallbacks(self, switchboard_id, fallbacks):
        url = url_join('switchboards', switchboard_id, 'fallbacks')
        self.session.put(url, fallbacks)


class IncallScheduleRelation(HTTPCommand):
    def associate(self, incall_id, schedule_id):
        url = url_join('incalls', incall_id, 'schedules', schedule_id)
        self.session.put(url)

    def dissociate(self, incall_id, schedule_id):
        url = url_join('incalls', incall_id, 'schedules', schedule_id)
        self.session.delete(url)


class UserScheduleRelation(HTTPCommand):
    def associate(self, user_id, schedule_id):
        url = url_join('users', user_id, 'schedules', schedule_id)
        self.session.put(url)

    def dissociate(self, user_id, schedule_id):
        url = url_join('users', user_id, 'schedules', schedule_id)
        self.session.delete(url)


class GroupScheduleRelation(HTTPCommand):
    def associate(self, group_id, schedule_id):
        url = url_join('groups', group_id, 'schedules', schedule_id)
        self.session.put(url)

    def dissociate(self, group_id, schedule_id):
        url = url_join('groups', group_id, 'schedules', schedule_id)
        self.session.delete(url)


class QueueScheduleRelation(HTTPCommand):
    def associate(self, queue_id, schedule_id):
        url = url_join('queues', queue_id, 'schedules', schedule_id)
        self.session.put(url)

    def dissociate(self, queue_id, schedule_id):
        url = url_join('queues', queue_id, 'schedules', schedule_id)
        self.session.delete(url)


class OutcallScheduleRelation(HTTPCommand):
    def associate(self, outcall_id, schedule_id):
        url = url_join('outcalls', outcall_id, 'schedules', schedule_id)
        self.session.put(url)

    def dissociate(self, outcall_id, schedule_id):
        url = url_join('outcalls', outcall_id, 'schedules', schedule_id)
        self.session.delete(url)


class OutcallCallPermissionRelation(HTTPCommand):
    def associate(self, outcall_id, call_permission_id):
        url = url_join('outcalls', outcall_id, 'callpermissions', call_permission_id)
        self.session.put(url)

    def dissociate(self, outcall_id, call_permission_id):
        url = url_join('outcalls', outcall_id, 'callpermissions', call_permission_id)
        self.session.delete(url)


class GroupCallPermissionRelation(HTTPCommand):
    def associate(self, group_id, call_permission_id):
        url = url_join('groups', group_id, 'callpermissions', call_permission_id)
        self.session.put(url)

    def dissociate(self, group_id, call_permission_id):
        url = url_join('groups', group_id, 'callpermissions', call_permission_id)
        self.session.delete(url)


class CallFilterRecipientUserRelation(HTTPCommand):
    def associate(self, call_filter_id, users):
        url = url_join('callfilters', call_filter_id, 'recipients', 'users')
        body = {'users': []}
        for user in users:
            result = {'uuid': user['uuid']}
            if user.get('timeout'):
                result['timeout'] = user['timeout']
            body['users'].append(result)
        self.session.put(url, body)


class CallFilterSurrogateUserRelation(HTTPCommand):
    def associate(self, call_filter_id, users):
        url = url_join('callfilters', call_filter_id, 'surrogates', 'users')
        body = {'users': [{'uuid': user['uuid']} for user in users]}
        self.session.put(url, body)


class CallFilterFallbackRelation(HTTPCommand):
    def update_fallbacks(self, call_filter_id, fallbacks):
        url = url_join('callfilters', call_filter_id, 'fallbacks')
        self.session.put(url, fallbacks)


class CallPickupInterceptorUserRelation(HTTPCommand):
    def associate(self, call_pickup_id, users):
        url = url_join('callpickups', call_pickup_id, 'interceptors', 'users')
        body = {'users': [{'uuid': user['uuid']} for user in users]}
        self.session.put(url, body)


class CallPickupTargetUserRelation(HTTPCommand):
    def associate(self, call_pickup_id, users):
        url = url_join('callpickups', call_pickup_id, 'targets', 'users')
        body = {'users': [{'uuid': user['uuid']} for user in users]}
        self.session.put(url, body)


class CallPickupInterceptorGroupRelation(HTTPCommand):
    def associate(self, call_pickup_id, groups):
        url = url_join('callpickups', call_pickup_id, 'interceptors', 'groups')
        body = {'groups': [{'id': group['id']} for group in groups]}
        self.session.put(url, body)


class CallPickupTargetGroupRelation(HTTPCommand):
    def associate(self, call_pickup_id, groups):
        url = url_join('callpickups', call_pickup_id, 'targets', 'groups')
        body = {'groups': [{'id': group['id']} for group in groups]}
        self.session.put(url, body)


class QueueFallbackRelation(HTTPCommand):
    def list_fallbacks(self, queue_id):
        url = url_join('queues', queue_id, 'fallbacks')
        response = self.session.get(url)
        return response.json()

    def update_fallbacks(self, queue_id, fallbacks):
        url = url_join('queues', queue_id, 'fallbacks')
        self.session.put(url, fallbacks)


class QueueExtensionRelation(HTTPCommand):
    def associate(self, queue_id, extension_id):
        url = url_join('queues', queue_id, 'extensions', extension_id)
        self.session.put(url)

    def dissociate(self, queue_id, extension_id):
        url = url_join('queues', queue_id, 'extensions', extension_id)
        self.session.delete(url)


class ContextContextRelation(HTTPCommand):
    def associate(self, context_id, contexts):
        url = url_join('contexts', context_id, 'contexts')
        body = {'contexts': [{'id': context['id']} for context in contexts]}
        self.session.put(url, body)


class ContextRangeRelation(HTTPCommand):
    def list_ranges(self, context_id, range_type, tenant_uuid=None, **kwargs):
        headers = dict(self.session.READ_HEADERS)
        if tenant_uuid:
            headers['Accent-Tenant'] = tenant_uuid

        url = url_join('contexts', context_id, 'ranges', range_type)
        response = self.session.get(url, headers=headers, params=kwargs)
        return response.json()


class QueueMemberAgentRelation(HTTPCommand):
    def associate(self, queue_id, agent_id, **kwargs):
        url = url_join('queues', queue_id, 'members', 'agents', agent_id)
        self.session.put(url, kwargs)

    def dissociate(self, queue_id, agent_id):
        url = url_join('queues', queue_id, 'members', 'agents', agent_id)
        self.session.delete(url)


class QueueMemberUserRelation(HTTPCommand):
    def associate(self, queue_id, user_uuid, **kwargs):
        url = url_join('queues', queue_id, 'members', 'users', user_uuid)
        self.session.put(url, kwargs)

    def dissociate(self, queue_id, user_uuid):
        url = url_join('queues', queue_id, 'members', 'users', user_uuid)
        self.session.delete(url)


class AgentSkillRelation(HTTPCommand):
    def associate(self, agent_id, skill_id, **kwargs):
        weight = kwargs.pop('weight', None)
        if weight is not None:
            kwargs['skill_weight'] = weight

        url = url_join('agents', agent_id, 'skills', skill_id)
        self.session.put(url, kwargs)

    def dissociate(self, agent_id, skill_id):
        url = url_join('agents', agent_id, 'skills', skill_id)
        self.session.delete(url)


class UserExternalAppRelation(HTTPCommand):
    def list(self, user_uuid, **kwargs):
        url = url_join('users', user_uuid, 'external', 'apps')
        response = self.session.get(url, params=kwargs)
        return response.json()

    def create(self, user_uuid, name, body):
        url = url_join('users', user_uuid, 'external', 'apps', name)
        response = self.session.post(url, body)
        return response.json()

    def update(self, user_uuid, name, body):
        url = url_join('users', user_uuid, 'external', 'apps', name)
        self.session.put(url, body)

    def get(self, user_uuid, name):
        url = url_join('users', user_uuid, 'external', 'apps', name)
        response = self.session.get(url)
        return response.json()

    def delete(self, user_uuid, name):
        url = url_join('users', user_uuid, 'external', 'apps', name)
        self.session.delete(url)

----------------------------------------

File: session.py
Please review for update

# Copyright 2023 Accent Communications

import json

import requests


class ConfdSession:
    OK_STATUSES = (requests.codes.ok, requests.codes.created, requests.codes.no_content)

    READ_HEADERS = {'Accept': 'application/json'}

    WRITE_HEADERS = {'Accept': 'application/json', 'Content-Type': 'application/json'}

    def __init__(self, session, base_url):
        self.session = session
        self.base_url = base_url

    def check_response(self, response, check=True):
        if not check:
            return

        if response.status_code not in self.OK_STATUSES:
            try:
                messages = response.json()
            except ValueError:
                pass
            else:
                response.reason = ". ".join(messages)

            response.raise_for_status()

    def clean_url(self, part):
        return f"{self.base_url.rstrip('/')}/{part.lstrip('/')}"

    def head(self, url, **kwargs):
        kwargs.setdefault('headers', self.READ_HEADERS)
        check_response = kwargs.pop('check_response', True)

        url = self.clean_url(url)
        response = self.session.head(url, **kwargs)

        self.check_response(response, check_response)
        return response

    def get(self, url, **kwargs):
        kwargs.setdefault('headers', self.READ_HEADERS)
        check_response = kwargs.pop('check_response', True)

        url = self.clean_url(url)
        response = self.session.get(url, **kwargs)

        self.check_response(response, check_response)
        return response

    def post(self, url, body=None, **kwargs):
        kwargs.setdefault('headers', self.WRITE_HEADERS)
        check_response = kwargs.pop('check_response', True)

        url = self.clean_url(url)
        encoded_body = self.encode_body(body, kwargs)
        response = self.session.post(url, data=encoded_body, **kwargs)

        self.check_response(response, check_response)
        return response

    def put(self, url, body=None, **kwargs):
        kwargs.setdefault('headers', self.WRITE_HEADERS)
        check_response = kwargs.pop('check_response', True)

        url = self.clean_url(url)
        encoded_body = self.encode_body(body, kwargs)
        response = self.session.put(url, data=encoded_body, **kwargs)

        self.check_response(response, check_response)
        return response

    def encode_body(self, body, kwargs):
        raw = kwargs.pop('raw', None)
        if raw:
            return raw
        if body is not None:
            return json.dumps(body)
        return None

    def delete(self, url, **kwargs):
        kwargs.setdefault('headers', self.READ_HEADERS)
        check_response = kwargs.pop('check_response', True)

        url = self.clean_url(url)
        response = self.session.delete(url, **kwargs)

        self.check_response(response, check_response)
        return response

----------------------------------------

File: tests/__init__.py
Please review for update

# Copyright 2023 Accent Communications

from unittest import TestCase
from unittest.mock import Mock

from ..session import ConfdSession


class TestCommand(TestCase):
    def setUp(self):
        self.session = Mock(ConfdSession)
        self.session.READ_HEADERS = ConfdSession.READ_HEADERS
        self.session.WRITE_HEADERS = ConfdSession.WRITE_HEADERS
        self.client = Mock()
        self.client.session.return_value = self.session
        self.command = self.Command(self.client)

    def set_response(self, action, status_code, json=None, content=None):
        response = Mock()
        response.status_code = status_code
        response.json.return_value = json
        response.content = content

        mock_action = getattr(self.session, action)
        mock_action.return_value = response

        return json

----------------------------------------

File: tests/test_crud.py
Please review for update

# Copyright 2023 Accent Communications

from hamcrest import assert_that, equal_to

from accent_confd_client.tests import TestCommand

from ..crud import CRUDCommand


class CRUDCommandTest(CRUDCommand):
    resource = 'test'


class TestCRUD(TestCommand):
    Command = CRUDCommandTest

    def test_list(self):
        expected_response = self.set_response(
            'get',
            200,
            {
                "total": 2,
                "items": [
                    {"id": 1, "firstname": "John"},
                    {"id": 2, "firstname": "Mary"},
                ],
            },
        )

        result = self.command.list(search='term')

        assert_that(result, equal_to(expected_response))
        self.session.get.assert_called_once_with('/test', params={'search': 'term'})

    def test_get(self):
        resource_id = 1
        expected_url = f"/test/{resource_id}"
        expected_response = self.set_response(
            'get', 200, {'id': resource_id, 'firstname': 'John'}
        )

        result = self.command.get(resource_id)

        assert_that(result, equal_to(expected_response))
        self.session.get.assert_called_once_with(expected_url)

    def test_create(self):
        expected_url = "/test"
        expected_response = self.set_response(
            'post', 201, {'id': 1, 'firstname': 'John'}
        )

        body = {'firstname': 'John'}

        result = self.command.create(body)

        assert_that(result, equal_to(expected_response))
        self.session.post.assert_called_once_with(expected_url, body)

    def test_update(self):
        resource_id = 1
        expected_url = f"/test/{resource_id}"
        self.set_response('put', 204)

        body = {
            'id': resource_id,
            'firstname': 'John',
            'links': [{'rel': 'users', 'href': 'http://localhost/users/1'}],
        }

        expected_body = {'id': resource_id, 'firstname': 'John'}

        self.command.update(body)

        self.session.put.assert_called_once_with(expected_url, expected_body)

    def test_update_with_uuid(self):
        resource_uuid = 'abcd-123'
        expected_url = f"/test/{resource_uuid}"
        self.set_response('put', 204)

        body = {
            'uuid': resource_uuid,
            'firstname': 'John',
            'links': [{'rel': 'users', 'href': 'http://localhost/users/1'}],
        }

        expected_body = {'uuid': resource_uuid, 'firstname': 'John'}

        self.command.update(body)

        self.session.put.assert_called_once_with(expected_url, expected_body)

    def test_update_with_no_uuid_or_id(self):
        body = {'firstname': 'John'}
        self.assertRaises(KeyError, self.command.update, body)

    def test_delete(self):
        resource_id = 1
        expected_url = f"/test/{resource_id}"
        self.set_response('delete', 204)

        self.command.delete(resource_id)

        self.session.delete.assert_called_once_with(expected_url)

----------------------------------------

File: tests/test_relations.py
Please review for update

# Copyright 2023 Accent Communications


from hamcrest import assert_that

from accent_confd_client.relations import (
    AgentSkillRelation,
    CallFilterFallbackRelation,
    CallFilterRecipientUserRelation,
    CallFilterSurrogateUserRelation,
    CallPickupInterceptorGroupRelation,
    CallPickupInterceptorUserRelation,
    CallPickupTargetGroupRelation,
    CallPickupTargetUserRelation,
    ConferenceExtensionRelation,
    ContextContextRelation,
    GroupCallPermissionRelation,
    GroupExtensionRelation,
    GroupFallbackRelation,
    GroupMemberExtensionRelation,
    GroupMemberUserRelation,
    GroupScheduleRelation,
    IncallExtensionRelation,
    IncallScheduleRelation,
    LineApplicationRelation,
    LineDeviceRelation,
    LineEndpointCustomRelation,
    LineEndpointSccpRelation,
    LineEndpointSipRelation,
    LineExtensionRelation,
    OutcallCallPermissionRelation,
    OutcallExtensionRelation,
    OutcallScheduleRelation,
    OutcallTrunkRelation,
    PagingCallerUserRelation,
    PagingMemberUserRelation,
    ParkingLotExtensionRelation,
    QueueExtensionRelation,
    QueueFallbackRelation,
    QueueMemberAgentRelation,
    QueueMemberUserRelation,
    QueueScheduleRelation,
    SwitchboardFallbackRelation,
    SwitchboardMemberUserRelation,
    TrunkEndpointCustomRelation,
    TrunkEndpointIAXRelation,
    TrunkEndpointSipRelation,
    TrunkRegisterIAXRelation,
    TrunkRegisterSipRelation,
    UserAgentRelation,
    UserCallPermissionRelation,
    UserEndpointSipRelation,
    UserFallbackRelation,
    UserForwardRelation,
    UserFuncKeyRelation,
    UserGroupRelation,
    UserLineRelation,
    UserScheduleRelation,
    UserServiceRelation,
    UserVoicemailRelation,
)
from accent_confd_client.tests import TestCommand


class TestUserLineRelation(TestCommand):
    Command = UserLineRelation

    def test_user_line_association(self):
        user_id = 1
        line_id = 2

        self.command.associate(user_id, line_id)
        self.session.put.assert_called_once_with("/users/1/lines/2")

    def test_user_line_dissociation(self):
        user_id = 1
        line_id = 2

        self.command.dissociate(user_id, line_id)
        self.session.delete.assert_called_once_with("/users/1/lines/2")

    def test_user_line_update_lines(self):
        user_id = 1
        lines = [{'id': 2}, {'id': 3}]

        self.set_response('put', 204)
        expected_body = {'lines': lines}

        self.command.update_lines(user_id, lines)
        self.session.put.assert_called_once_with("/users/1/lines", expected_body)


class TestUserEndpointSipRelation(TestCommand):
    Command = UserEndpointSipRelation

    def test_user_line_list_by_user(self):
        user_uuid = '1234-abcd'
        line_id = 42
        expected_url = f"/users/{user_uuid}/lines/{line_id}/associated/endpoints/sip"
        expected_result = {"username": 'tata'}

        self.set_response('get', 200, expected_result)

        result = self.command.get_by_user_line(user_uuid, line_id)

        self.session.get.assert_called_once_with(expected_url, params={})
        assert_that(result, expected_result)


class TestLineExtensionRelation(TestCommand):
    Command = LineExtensionRelation

    def test_line_extension_association(self):
        line_id = 1
        extension_id = 2

        self.command.associate(line_id, extension_id)
        self.session.put.assert_called_once_with("/lines/1/extensions/2")

    def test_line_extension_dissociation(self):
        line_id = 1
        extension_id = 2

        self.command.dissociate(line_id, extension_id)
        self.session.delete.assert_called_once_with("/lines/1/extensions/2")


class TestLineApplicationRelation(TestCommand):
    Command = LineApplicationRelation

    def test_line_application_association(self):
        line_id = 1
        application_id = 2

        self.set_response('put', 204)

        self.command.associate(line_id, application_id)
        self.session.put.assert_called_once_with("/lines/1/applications/2")

    def test_line_application_dissociation(self):
        line_id = 1
        application_id = 2

        self.set_response('delete', 204)

        self.command.dissociate(line_id, application_id)
        self.session.delete.assert_called_once_with("/lines/1/applications/2")


class TestLineDeviceRelation(TestCommand):
    Command = LineDeviceRelation

    def test_line_device_association(self):
        line_id = 1
        device_id = 2

        self.set_response('put', 204)

        self.command.associate(line_id, device_id)
        self.session.put.assert_called_once_with("/lines/1/devices/2")

    def test_line_device_dissociation(self):
        line_id = 1
        device_id = 2

        self.set_response('delete', 204)

        self.command.dissociate(line_id, device_id)
        self.session.delete.assert_called_once_with("/lines/1/devices/2")

    def test_get_by_line(self):
        line_id = 1
        device_id = 2

        expected_result = {
            'line_id': line_id,
            'device_id': device_id,
            'links': [
                {'rel': 'lines', 'href': 'http://localhost:9486/1.1/lines/1'},
                {'rel': 'devices', 'href': 'http://localhost:9486/1.1/devices/1'},
            ],
        }

        self.set_response('get', 200, expected_result)

        response = self.command.get_by_line(line_id)
        self.session.get.assert_called_once_with("/lines/1/devices")

        assert_that(response, expected_result)

    def test_list_by_device(self):
        line_id = 1
        device_id = 2

        expected_result = {
            'total': 1,
            'items': [
                {
                    'line_id': line_id,
                    'device_id': device_id,
                    'links': [
                        {'rel': 'lines', 'href': 'http://localhost:9486/1.1/lines/1'},
                        {
                            'rel': 'devices',
                            'href': 'http://localhost:9486/1.1/devices/1',
                        },
                    ],
                }
            ],
        }

        self.set_response('get', 200, expected_result)

        response = self.command.list_by_device(device_id)
        self.session.get.assert_called_once_with("/devices/2/lines")

        assert_that(response, expected_result)


class TestLineEndpointSipRelation(TestCommand):
    Command = LineEndpointSipRelation

    def test_line_endpoint_sip_association(self):
        line_id = 1
        sip_id = 2

        self.set_response('put', 204)

        self.command.associate(line_id, sip_id)
        self.session.put.assert_called_once_with("/lines/1/endpoints/sip/2")

    def test_line_endpoint_sip_dissociation(self):
        line_id = 1
        sip_id = 2

        self.set_response('delete', 204)

        self.command.dissociate(line_id, sip_id)
        self.session.delete.assert_called_once_with("/lines/1/endpoints/sip/2")


class TestLineEndpointSccpRelation(TestCommand):
    Command = LineEndpointSccpRelation

    def test_line_endpoint_sccp_association(self):
        line_id = 1
        sccp_id = 2

        self.set_response('put', 204)

        self.command.associate(line_id, sccp_id)
        self.session.put.assert_called_once_with("/lines/1/endpoints/sccp/2")

    def test_line_endpoint_sccp_dissociation(self):
        line_id = 1
        sccp_id = 2

        self.set_response('delete', 204)

        self.command.dissociate(line_id, sccp_id)
        self.session.delete.assert_called_once_with("/lines/1/endpoints/sccp/2")


class TestLineEndpointCustomRelation(TestCommand):
    Command = LineEndpointCustomRelation

    def test_line_endpoint_custom_association(self):
        line_id = 1
        custom_id = 2

        self.set_response('put', 204)

        self.command.associate(line_id, custom_id)
        self.session.put.assert_called_once_with("/lines/1/endpoints/custom/2")

    def test_line_endpoint_custom_dissociation(self):
        line_id = 1
        custom_id = 2

        self.set_response('delete', 204)

        self.command.dissociate(line_id, custom_id)
        self.session.delete.assert_called_once_with("/lines/1/endpoints/custom/2")


class TestUserVoicemailRelation(TestCommand):
    Command = UserVoicemailRelation

    def test_user_voicemail_association(self):
        user_id = 1
        voicemail_id = 2

        self.command.associate(user_id, voicemail_id)
        self.session.put.assert_called_once_with("/users/1/voicemails/2")

    def test_user_voicemail_dissociation(self):
        user_id = 1

        self.command.dissociate(user_id)
        self.session.delete.assert_called_once_with("/users/1/voicemails")


class TestUserAgentRelation(TestCommand):
    Command = UserAgentRelation

    def test_user_agent_association(self):
        user_id = 1
        agent_id = 2

        self.command.associate(user_id, agent_id)
        self.session.put.assert_called_once_with("/users/1/agents/2")

    def test_user_agent_dissociation(self):
        user_id = 1

        self.command.dissociate(user_id)
        self.session.delete.assert_called_once_with("/users/1/agents")


class TestUserFuncKeyRelation(TestCommand):
    Command = UserFuncKeyRelation

    def test_update_func_key(self):
        user_id = 1234
        position = 1
        funckey = {'destination': {'type': 'service', 'service': 'enablednd'}}

        self.command.update_funckey(user_id, position, funckey)

        expected_url = f"/users/{user_id}/funckeys/{position}"
        self.session.put.assert_called_with(expected_url, funckey)

    def test_remove_func_key(self):
        user_id = 1234
        position = 1
        expected_url = f"/users/{user_id}/funckeys/{position}"

        self.command.remove_funckey(user_id, position)

        self.session.delete.assert_called_with(expected_url)

    def test_list_funckeys(self):
        user_id = 1234
        expected_url = f"/users/{user_id}/funckeys"
        expected_result = {"total": 0, "items": []}

        self.set_response('get', 200, expected_result)

        result = self.command.list_funckeys(user_id)

        self.session.get.assert_called_once_with(expected_url)
        assert_that(result, expected_result)

    def test_get_funckey(self):
        user_id = 1234
        position = 3
        expected_url = f"/users/{user_id}/funckeys/{position}"
        expected_result = {
            "blf": True,
            "label": "Call john",
            "destination": {"type": "user", "user_id": 34},
        }

        self.set_response('get', 200, expected_result)

        result = self.command.get_funckey(user_id, position)

        self.session.get.assert_called_once_with(expected_url)
        assert_that(result, expected_result)

    def test_update_funckeys(self):
        user_id = 1234
        funckeys = {
            'keys': {
                '1': {'destination': {'type': 'service', 'service': 'enablednd'}},
                '2': {'destination': {'type': 'custom', 'exten': '1234'}},
            }
        }

        self.command.update_funckeys(user_id, funckeys)

        expected_url = f"/users/{user_id}/funckeys"
        self.session.put.assert_called_with(expected_url, funckeys)

    def test_dissociate_funckey_template(self):
        user_id = 1234
        template_id = 25
        expected_url = f"/users/{user_id}/funckeys/templates/{template_id}"

        self.set_response('delete', 204)

        self.command.dissociate_funckey_template(user_id, template_id)

        self.session.delete.assert_called_once_with(expected_url)

    def test_associate_funckey_template(self):
        user_id = 1234
        template_id = 25
        expected_url = f"/users/{user_id}/funckeys/templates/{template_id}"

        self.set_response('put', 204)

        self.command.associate_funckey_template(user_id, template_id)

        self.session.put.assert_called_once_with(expected_url)


class TestUserServiceRelation(TestCommand):
    Command = UserServiceRelation

    def test_update_service(self):
        user_id = 1234
        service_name = 'dnd'
        service = {'enabled': True}

        self.command.update_service(user_id, service_name, service)

        expected_url = f"/users/{user_id}/services/{service_name}"
        self.session.put.assert_called_with(expected_url, service)

    def test_get_service(self):
        user_id = 1234
        service_name = 'dnd'
        expected_url = f"/users/{user_id}/services/{service_name}"
        expected_result = {'enabled': True}

        self.set_response('get', 200, expected_result)

        result = self.command.get_service(user_id, service_name)

        self.session.get.assert_called_once_with(expected_url)
        assert_that(result, expected_result)

    def test_list_services(self):
        user_id = 1234
        expected_url = f"/users/{user_id}/services"
        expected_result = {"total": 0, "items": []}

        self.set_response('get', 200, expected_result)

        result = self.command.list_services(user_id)

        self.session.get.assert_called_once_with(expected_url)
        assert_that(result, expected_result)

    def test_update_services(self):
        user_id = 1234
        services = {'dnd': {'enabled': True}, 'incallfilter': {'enabled': False}}

        self.command.update_services(user_id, services)

        expected_url = f"/users/{user_id}/services"
        self.session.put.assert_called_with(expected_url, services)


class TestUserForwardRelation(TestCommand):
    Command = UserForwardRelation

    def test_update_forward(self):
        user_id = 1234
        forward_name = 'dnd'
        forward = {'enabled': True}

        self.command.update_forward(user_id, forward_name, forward)

        expected_url = f"/users/{user_id}/forwards/{forward_name}"
        self.session.put.assert_called_with(expected_url, forward)

    def test_get_forward(self):
        user_id = 1234
        forward_name = 'dnd'
        expected_url = f"/users/{user_id}/forwards/{forward_name}"
        expected_result = {'enabled': True}

        self.set_response('get', 200, expected_result)

        result = self.command.get_forward(user_id, forward_name)

        self.session.get.assert_called_once_with(expected_url)
        assert_that(result, expected_result)

    def test_list_forwards(self):
        user_id = 1234
        expected_url = f"/users/{user_id}/forwards"
        expected_result = {"total": 0, "items": []}

        self.set_response('get', 200, expected_result)

        result = self.command.list_forwards(user_id)

        self.session.get.assert_called_once_with(expected_url)
        assert_that(result, expected_result)

    def test_update_forwards(self):
        user_id = 1234
        forwards = {
            'busy': {'enabled': True, 'destination': '123'},
            'noanswer': {'enabled': False, 'destination': '456'},
            'unconditional': {'enabled': False, 'destination': None},
        }

        self.command.update_forwards(user_id, forwards)

        expected_url = f"/users/{user_id}/forwards"
        self.session.put.assert_called_with(expected_url, forwards)


class TestUserCallPermissionRelation(TestCommand):
    Command = UserCallPermissionRelation

    def test_user_call_permission_association(self):
        user_id = 1
        call_permission_id = 2

        self.command.associate(user_id, call_permission_id)
        self.session.put.assert_called_once_with("/users/1/callpermissions/2")

    def test_user_call_permission_dissociation(self):
        user_id = 1
        call_permission_id = 2

        self.command.dissociate(user_id, call_permission_id)
        self.session.delete.assert_called_once_with("/users/1/callpermissions/2")


class TestTrunkEndpointSipRelation(TestCommand):
    Command = TrunkEndpointSipRelation

    def test_trunk_endpoint_sip_association(self):
        trunk_id = 1
        sip_id = 2

        self.set_response('put', 204)

        self.command.associate(trunk_id, sip_id)
        self.session.put.assert_called_once_with("/trunks/1/endpoints/sip/2")

    def test_trunk_endpoint_sip_dissociation(self):
        trunk_id = 1
        sip_id = 2

        self.set_response('delete', 204)

        self.command.dissociate(trunk_id, sip_id)
        self.session.delete.assert_called_once_with("/trunks/1/endpoints/sip/2")


class TestTrunkEndpointIAXRelation(TestCommand):
    Command = TrunkEndpointIAXRelation

    def test_trunk_endpoint_iax_association(self):
        trunk_id = 1
        iax_id = 2

        self.set_response('put', 204)

        self.command.associate(trunk_id, iax_id)
        self.session.put.assert_called_once_with("/trunks/1/endpoints/iax/2")

    def test_trunk_endpoint_iax_dissociation(self):
        trunk_id = 1
        iax_id = 2

        self.set_response('delete', 204)

        self.command.dissociate(trunk_id, iax_id)
        self.session.delete.assert_called_once_with("/trunks/1/endpoints/iax/2")


class TestTrunkRegisterSipRelation(TestCommand):
    Command = TrunkRegisterSipRelation

    def test_trunk_register_sip_association(self):
        trunk_id = 1
        sip_id = 2

        self.set_response('put', 204)

        self.command.associate(trunk_id, sip_id)
        self.session.put.assert_called_once_with("/trunks/1/registers/sip/2")

    def test_trunk_register_sip_dissociation(self):
        trunk_id = 1
        sip_id = 2

        self.set_response('delete', 204)

        self.command.dissociate(trunk_id, sip_id)
        self.session.delete.assert_called_once_with("/trunks/1/registers/sip/2")


class TestTrunkRegisterIAXRelation(TestCommand):
    Command = TrunkRegisterIAXRelation

    def test_trunk_register_iax_association(self):
        trunk_id = 1
        iax_id = 2

        self.set_response('put', 204)

        self.command.associate(trunk_id, iax_id)
        self.session.put.assert_called_once_with("/trunks/1/registers/iax/2")

    def test_trunk_register_iax_dissociation(self):
        trunk_id = 1
        iax_id = 2

        self.set_response('delete', 204)

        self.command.dissociate(trunk_id, iax_id)
        self.session.delete.assert_called_once_with("/trunks/1/registers/iax/2")


class TestTrunkEndpointCustomRelation(TestCommand):
    Command = TrunkEndpointCustomRelation

    def test_trunk_endpoint_custom_association(self):
        trunk_id = 1
        custom_id = 2

        self.set_response('put', 204)

        self.command.associate(trunk_id, custom_id)
        self.session.put.assert_called_once_with("/trunks/1/endpoints/custom/2")

    def test_trunk_endpoint_custom_dissociation(self):
        trunk_id = 1
        custom_id = 2

        self.set_response('delete', 204)

        self.command.dissociate(trunk_id, custom_id)
        self.session.delete.assert_called_once_with("/trunks/1/endpoints/custom/2")


class TestIncallExtensionRelation(TestCommand):
    Command = IncallExtensionRelation

    def test_incall_extension_association(self):
        incall_id = 1
        extension_id = 2

        self.set_response('put', 204)

        self.command.associate(incall_id, extension_id)
        self.session.put.assert_called_once_with("/incalls/1/extensions/2")

    def test_incall_extension_dissociation(self):
        incall_id = 1
        extension_id = 2

        self.set_response('delete', 204)

        self.command.dissociate(incall_id, extension_id)
        self.session.delete.assert_called_once_with("/incalls/1/extensions/2")


class TestOutcallTrunkRelation(TestCommand):
    Command = OutcallTrunkRelation

    def test_outcall_trunk_association(self):
        outcall_id = 1
        trunks = [{'id': 2}, {'id': 3}]

        self.set_response('put', 204)
        expected_body = {'trunks': trunks}

        self.command.associate(outcall_id, trunks)
        self.session.put.assert_called_once_with("/outcalls/1/trunks", expected_body)


class TestOutcallExtensionRelation(TestCommand):
    Command = OutcallExtensionRelation

    def test_outcall_extension_association(self):
        outcall_id = 1
        extension_id = 2

        self.set_response('put', 204)
        expected_body = {
            'prefix': '123',
            'external_prefix': '456',
            'strip_digits': 2,
            'caller_id': 'toto',
        }

        self.command.associate(
            outcall_id,
            extension_id,
            prefix='123',
            external_prefix='456',
            strip_digits=2,
            caller_id='toto',
        )
        self.session.put.assert_called_once_with(
            "/outcalls/1/extensions/2", expected_body
        )

    def test_outcall_extension_dissociation(self):
        outcall_id = 1
        extension_id = 2

        self.set_response('delete', 204)

        self.command.dissociate(outcall_id, extension_id)
        self.session.delete.assert_called_once_with("/outcalls/1/extensions/2")


class TestGroupExtensionRelation(TestCommand):
    Command = GroupExtensionRelation

    def test_group_extension_association(self):
        group_id = 1
        extension_id = 2

        self.set_response('put', 204)

        self.command.associate(group_id, extension_id)
        self.session.put.assert_called_once_with("/groups/1/extensions/2")

    def test_group_extension_dissociation(self):
        group_id = 1
        extension_id = 2

        self.set_response('delete', 204)

        self.command.dissociate(group_id, extension_id)
        self.session.delete.assert_called_once_with("/groups/1/extensions/2")


class TestGroupMemberUserRelation(TestCommand):
    Command = GroupMemberUserRelation

    def test_group_user_association(self):
        group_id = 1
        users = [{'uuid': 'a-2', 'priority': 7}, {'uuid': 'b-3'}]

        self.set_response('put', 204)
        expected_body = {'users': users}

        self.command.associate(group_id, users)
        self.session.put.assert_called_once_with(
            "/groups/1/members/users", expected_body
        )


class TestGroupMemberExtensionRelation(TestCommand):
    Command = GroupMemberExtensionRelation

    def test_group_extension_association(self):
        group_id = 1
        extensions = [
            {'exten': '123', 'context': 'default', 'priority': 5},
            {'exten': '567', 'context': 'other'},
        ]

        self.set_response('put', 204)
        expected_body = {'extensions': extensions}

        self.command.associate(group_id, extensions)
        self.session.put.assert_called_once_with(
            "/groups/1/members/extensions", expected_body
        )


class TestUserGroupRelation(TestCommand):
    Command = UserGroupRelation

    def test_user_group_association(self):
        user_id = 1
        groups = [{'id': 2}, {'id': 3}]

        self.set_response('put', 204)
        expected_body = {'groups': groups}

        self.command.associate(user_id, groups)
        self.session.put.assert_called_once_with("/users/1/groups", expected_body)


class TestGroupFallbackRelation(TestCommand):
    Command = GroupFallbackRelation

    def test_list_fallbacks(self):
        group_id = 1234
        expected_url = f"/groups/{group_id}/fallbacks"
        expected_result = {'noanswer_destination': {'type': 'none'}}

        self.set_response('get', 200, expected_result)

        result = self.command.list_fallbacks(group_id)

        self.session.get.assert_called_once_with(expected_url)
        assert_that(result, expected_result)

    def test_update_fallbacks(self):
        group_id = 1234
        fallbacks = {'noanswer_destination': {'type': 'none'}}

        self.command.update_fallbacks(group_id, fallbacks)

        expected_url = f"/groups/{group_id}/fallbacks"
        self.session.put.assert_called_with(expected_url, fallbacks)


class TestUserFallbackRelation(TestCommand):
    Command = UserFallbackRelation

    def test_list_fallbacks(self):
        user_id = 1234
        expected_url = f"/users/{user_id}/fallbacks"
        expected_result = {
            'noanswer_destination': None,
            'busy_destination': None,
            'congestion_destination': None,
            'fail_destination': None,
        }

        self.set_response('get', 200, expected_result)

        result = self.command.list_fallbacks(user_id)

        self.session.get.assert_called_once_with(expected_url)
        assert_that(result, expected_result)

    def test_update_fallbacks(self):
        user_id = 1234
        fallbacks = {
            'noanswer_destination': None,
            'busy_destination': None,
            'congestion_destination': None,
            'fail_destination': None,
        }

        self.command.update_fallbacks(user_id, fallbacks)

        expected_url = f"/users/{user_id}/fallbacks"
        self.session.put.assert_called_with(expected_url, fallbacks)


class TestConferenceExtensionRelation(TestCommand):
    Command = ConferenceExtensionRelation

    def test_conference_extension_association(self):
        conference_id = 1
        extension_id = 2

        self.set_response('put', 204)

        self.command.associate(conference_id, extension_id)
        self.session.put.assert_called_once_with("/conferences/1/extensions/2")

    def test_conference_extension_dissociation(self):
        conference_id = 1
        extension_id = 2

        self.set_response('delete', 204)

        self.command.dissociate(conference_id, extension_id)
        self.session.delete.assert_called_once_with("/conferences/1/extensions/2")


class TestParkingLotExtensionRelation(TestCommand):
    Command = ParkingLotExtensionRelation

    def test_parking_lot_extension_association(self):
        parking_lot_id = 1
        extension_id = 2

        self.set_response('put', 204)

        self.command.associate(parking_lot_id, extension_id)
        self.session.put.assert_called_once_with("/parkinglots/1/extensions/2")

    def test_parking_lot_extension_dissociation(self):
        parking_lot_id = 1
        extension_id = 2

        self.set_response('delete', 204)

        self.command.dissociate(parking_lot_id, extension_id)
        self.session.delete.assert_called_once_with("/parkinglots/1/extensions/2")


class TestPagingMemberUserRelation(TestCommand):
    Command = PagingMemberUserRelation

    def test_paging_user_association(self):
        paging_id = 1
        users = [{'uuid': 'a-2'}, {'uuid': 'b-3'}]

        self.set_response('put', 204)
        expected_body = {'users': users}

        self.command.associate(paging_id, users)
        self.session.put.assert_called_once_with(
            "/pagings/1/members/users", expected_body
        )


class TestPagingCallerUserRelation(TestCommand):
    Command = PagingCallerUserRelation

    def test_paging_user_association(self):
        paging_id = 1
        users = [{'uuid': 'a-2'}, {'uuid': 'b-3'}]

        self.set_response('put', 204)
        expected_body = {'users': users}

        self.command.associate(paging_id, users)
        self.session.put.assert_called_once_with(
            "/pagings/1/callers/users", expected_body
        )


class TestSwitchboardMemberUserRelation(TestCommand):
    Command = SwitchboardMemberUserRelation

    def test_switchboard_user_association(self):
        switchboard_uuid = "abcd"
        users = [{'uuid': 'a-2'}, {'uuid': 'b-3'}]

        self.set_response('put', 204)
        expected_body = {'users': users}

        self.command.associate(switchboard_uuid, users)
        self.session.put.assert_called_once_with(
            "/switchboards/abcd/members/users", expected_body
        )


class TestSwitchboardFallbackRelation(TestCommand):
    Command = SwitchboardFallbackRelation

    def test_list_fallbacks(self):
        switchboard_id = 1234
        expected_url = f"/switchboards/{switchboard_id}/fallbacks"
        expected_result = {'noanswer_destination': {'type': 'none'}}

        self.set_response('get', 200, expected_result)

        result = self.command.list_fallbacks(switchboard_id)

        self.session.get.assert_called_once_with(expected_url)
        assert_that(result, expected_result)

    def test_update_fallbacks(self):
        switchboard_id = 1234
        fallbacks = {'noanswer_destination': {'type': 'none'}}

        self.command.update_fallbacks(switchboard_id, fallbacks)

        expected_url = f"/switchboards/{switchboard_id}/fallbacks"
        self.session.put.assert_called_with(expected_url, fallbacks)


class TestIncallScheduleRelation(TestCommand):
    Command = IncallScheduleRelation

    def test_incall_schedule_association(self):
        incall_id = 1
        schedule_id = 2

        self.set_response('put', 204)

        self.command.associate(incall_id, schedule_id)
        self.session.put.assert_called_once_with("/incalls/1/schedules/2")

    def test_incall_schedule_dissociation(self):
        incall_id = 1
        schedule_id = 2

        self.set_response('delete', 204)

        self.command.dissociate(incall_id, schedule_id)
        self.session.delete.assert_called_once_with("/incalls/1/schedules/2")


class TestUserScheduleRelation(TestCommand):
    Command = UserScheduleRelation

    def test_user_schedule_association(self):
        user_id = 1
        schedule_id = 2

        self.set_response('put', 204)

        self.command.associate(user_id, schedule_id)
        self.session.put.assert_called_once_with("/users/1/schedules/2")

    def test_user_schedule_dissociation(self):
        user_id = 1
        schedule_id = 2

        self.set_response('delete', 204)

        self.command.dissociate(user_id, schedule_id)
        self.session.delete.assert_called_once_with("/users/1/schedules/2")


class TestGroupScheduleRelation(TestCommand):
    Command = GroupScheduleRelation

    def test_group_schedule_association(self):
        group_id = 1
        schedule_id = 2

        self.set_response('put', 204)

        self.command.associate(group_id, schedule_id)
        self.session.put.assert_called_once_with("/groups/1/schedules/2")

    def test_group_schedule_dissociation(self):
        group_id = 1
        schedule_id = 2

        self.set_response('delete', 204)

        self.command.dissociate(group_id, schedule_id)
        self.session.delete.assert_called_once_with("/groups/1/schedules/2")


class TestQueueScheduleRelation(TestCommand):
    Command = QueueScheduleRelation

    def test_queue_schedule_association(self):
        queue_id = 1
        schedule_id = 2

        self.set_response('put', 204)

        self.command.associate(queue_id, schedule_id)
        self.session.put.assert_called_once_with("/queues/1/schedules/2")

    def test_queue_schedule_dissociation(self):
        queue_id = 1
        schedule_id = 2

        self.set_response('delete', 204)

        self.command.dissociate(queue_id, schedule_id)
        self.session.delete.assert_called_once_with("/queues/1/schedules/2")


class TestOutcallScheduleRelation(TestCommand):
    Command = OutcallScheduleRelation

    def test_outcall_schedule_association(self):
        outcall_id = 1
        schedule_id = 2

        self.set_response('put', 204)

        self.command.associate(outcall_id, schedule_id)
        self.session.put.assert_called_once_with("/outcalls/1/schedules/2")

    def test_outcall_schedule_dissociation(self):
        outcall_id = 1
        schedule_id = 2

        self.set_response('delete', 204)

        self.command.dissociate(outcall_id, schedule_id)
        self.session.delete.assert_called_once_with("/outcalls/1/schedules/2")


class TestOutcallCallPermissionRelation(TestCommand):
    Command = OutcallCallPermissionRelation

    def test_outcall_call_permission_association(self):
        outcall_id = 1
        call_permission_id = 2

        self.command.associate(outcall_id, call_permission_id)
        self.session.put.assert_called_once_with("/outcalls/1/callpermissions/2")

    def test_outcall_call_permission_dissociation(self):
        outcall_id = 1
        call_permission_id = 2

        self.command.dissociate(outcall_id, call_permission_id)
        self.session.delete.assert_called_once_with("/outcalls/1/callpermissions/2")


class TestGroupCallPermissionRelation(TestCommand):
    Command = GroupCallPermissionRelation

    def test_group_call_permission_association(self):
        group_id = 1
        call_permission_id = 2

        self.command.associate(group_id, call_permission_id)
        self.session.put.assert_called_once_with("/groups/1/callpermissions/2")

    def test_group_call_permission_dissociation(self):
        group_id = 1
        call_permission_id = 2

        self.command.dissociate(group_id, call_permission_id)
        self.session.delete.assert_called_once_with("/groups/1/callpermissions/2")


class TestCallFilterRecipientUserRelation(TestCommand):
    Command = CallFilterRecipientUserRelation

    def test_call_filter_user_association(self):
        call_filter_id = 1
        users = [{'uuid': 'a-2'}, {'uuid': 'b-3', 'timeout': 5}]

        self.set_response('put', 204)
        expected_body = {'users': users}

        self.command.associate(call_filter_id, users)
        self.session.put.assert_called_once_with(
            "/callfilters/1/recipients/users", expected_body
        )


class TestCallFilterSurrogateUserRelation(TestCommand):
    Command = CallFilterSurrogateUserRelation

    def test_call_filter_user_association(self):
        call_filter_id = 1
        users = [{'uuid': 'a-2'}, {'uuid': 'b-3'}]

        self.set_response('put', 204)
        expected_body = {'users': users}

        self.command.associate(call_filter_id, users)
        self.session.put.assert_called_once_with(
            "/callfilters/1/surrogates/users", expected_body
        )


class TestCallFilterFallbackRelation(TestCommand):
    Command = CallFilterFallbackRelation

    def test_update_fallbacks(self):
        call_filter_id = 1234
        fallbacks = {'noanswer_destination': {'type': 'none'}}

        self.command.update_fallbacks(call_filter_id, fallbacks)

        expected_url = f"/callfilters/{call_filter_id}/fallbacks"
        self.session.put.assert_called_with(expected_url, fallbacks)


class TestCallPickupInterceptorUserRelation(TestCommand):
    Command = CallPickupInterceptorUserRelation

    def test_call_pickup_user_association(self):
        call_pickup_id = 1
        users = [{'uuid': 'a-2'}, {'uuid': 'b-3'}]

        self.set_response('put', 204)
        expected_body = {'users': users}

        self.command.associate(call_pickup_id, users)
        self.session.put.assert_called_once_with(
            "/callpickups/1/interceptors/users", expected_body
        )


class TestCallPickupTargetUserRelation(TestCommand):
    Command = CallPickupTargetUserRelation

    def test_call_pickup_user_association(self):
        call_pickup_id = 1
        users = [{'uuid': 'a-2'}, {'uuid': 'b-3'}]

        self.set_response('put', 204)
        expected_body = {'users': users}

        self.command.associate(call_pickup_id, users)
        self.session.put.assert_called_once_with(
            "/callpickups/1/targets/users", expected_body
        )


class TestCallPickupInterceptorGroupRelation(TestCommand):
    Command = CallPickupInterceptorGroupRelation

    def test_call_pickup_group_association(self):
        call_pickup_id = 1
        groups = [{'id': 1}, {'id': 2}]

        self.set_response('put', 204)
        expected_body = {'groups': groups}

        self.command.associate(call_pickup_id, groups)
        self.session.put.assert_called_once_with(
            "/callpickups/1/interceptors/groups", expected_body
        )


class TestCallPickupTargetGroupRelation(TestCommand):
    Command = CallPickupTargetGroupRelation

    def test_call_pickup_group_association(self):
        call_pickup_id = 1
        groups = [{'id': 1}, {'id': 2}]

        self.set_response('put', 204)
        expected_body = {'groups': groups}

        self.command.associate(call_pickup_id, groups)
        self.session.put.assert_called_once_with(
            "/callpickups/1/targets/groups", expected_body
        )


class TestQueueFallbackRelation(TestCommand):
    Command = QueueFallbackRelation

    def test_list_fallbacks(self):
        queue_id = 1234
        expected_url = f"/queues/{queue_id}/fallbacks"
        expected_result = {'noanswer_destination': {'type': 'none'}}

        self.set_response('get', 200, expected_result)

        result = self.command.list_fallbacks(queue_id)

        self.session.get.assert_called_once_with(expected_url)
        assert_that(result, expected_result)

    def test_update_fallbacks(self):
        queue_id = 1234
        fallbacks = {'noanswer_destination': {'type': 'none'}}

        self.command.update_fallbacks(queue_id, fallbacks)

        expected_url = f"/queues/{queue_id}/fallbacks"
        self.session.put.assert_called_with(expected_url, fallbacks)


class TestQueueExtensionRelation(TestCommand):
    Command = QueueExtensionRelation

    def test_queue_extension_association(self):
        queue_id = 1
        extension_id = 2

        self.set_response('put', 204)

        self.command.associate(queue_id, extension_id)
        self.session.put.assert_called_once_with("/queues/1/extensions/2")

    def test_queue_extension_dissociation(self):
        queue_id = 1
        extension_id = 2

        self.set_response('delete', 204)

        self.command.dissociate(queue_id, extension_id)
        self.session.delete.assert_called_once_with("/queues/1/extensions/2")


class TestContextContextRelation(TestCommand):
    Command = ContextContextRelation

    def test_context_context_association(self):
        context_id = 1
        contexts = [{'id': 2}, {'id': 3}]

        self.set_response('put', 204)
        expected_body = {'contexts': contexts}

        self.command.associate(context_id, contexts)
        self.session.put.assert_called_once_with("/contexts/1/contexts", expected_body)


class TestQueueMemberAgentRelation(TestCommand):
    Command = QueueMemberAgentRelation

    def test_queue_agent_association(self):
        queue_id = 1
        agent_id = 2
        priority = 3
        penalty = 4

        self.set_response('put', 204)
        expected_body = {'priority': priority, 'penalty': penalty}

        self.command.associate(queue_id, agent_id, priority=priority, penalty=penalty)
        self.session.put.assert_called_once_with(
            "/queues/1/members/agents/2", expected_body
        )

    def test_queue_agent_dissociation(self):
        queue_id = 1
        agent_id = 2

        self.set_response('delete', 204)

        self.command.dissociate(queue_id, agent_id)
        self.session.delete.assert_called_once_with("/queues/1/members/agents/2")


class TestQueueMemberUserRelation(TestCommand):
    Command = QueueMemberUserRelation

    def test_queue_user_association(self):
        queue_id = 1
        user_uuid = '1234-abcd'
        priority = 3

        self.set_response('put', 204)
        expected_body = {'priority': priority}

        self.command.associate(queue_id, user_uuid, priority=priority)
        self.session.put.assert_called_once_with(
            "/queues/1/members/users/1234-abcd", expected_body
        )

    def test_queue_user_dissociation(self):
        queue_id = 1
        user_uuid = '1234-abcd'

        self.set_response('delete', 204)

        self.command.dissociate(queue_id, user_uuid)
        self.session.delete.assert_called_once_with("/queues/1/members/users/1234-abcd")


class TestQueueSkillRelation(TestCommand):
    Command = AgentSkillRelation

    def test_queue_skill_association(self):
        queue_id = 1
        skill_id = 2
        weight = 42

        self.set_response('put', 204)
        expected_body = {'skill_weight': weight}

        self.command.associate(queue_id, skill_id, weight=weight)
        self.session.put.assert_called_once_with("/agents/1/skills/2", expected_body)

    def test_queue_skill_dissociation(self):
        queue_id = 1
        skill_id = 2

        self.set_response('delete', 204)

        self.command.dissociate(queue_id, skill_id)
        self.session.delete.assert_called_once_with("/agents/1/skills/2")

----------------------------------------

File: tests/test_session.py
Please review for update

# Copyright 2023 Accent Communications

import json
import unittest
from unittest.mock import Mock

from hamcrest import assert_that, equal_to
from requests import Session

from accent_confd_client.session import ConfdSession


class TestConfdSession(unittest.TestCase):
    def setUp(self):
        self.session = Mock(Session)
        self.base_url = "http://localhost/1.1"
        self.confd_session = ConfdSession(self.session, self.base_url)

    def set_response(self, action, status_code):
        response = Mock()
        response.status_code = status_code

        mock_action = getattr(self.session, action)
        mock_action.return_value = response
        return response

    def test_head(self):
        expected_url = f"{self.base_url}/users/123"
        expected_response = self.set_response('head', 200)

        result = self.confd_session.head("/users/123")

        assert_that(result, equal_to(expected_response))
        self.session.head.assert_called_once_with(
            expected_url, headers={'Accept': 'application/json'}
        )

    def test_get(self):
        expected_url = f"{self.base_url}/users"
        expected_response = self.set_response('get', 200)

        result = self.confd_session.get("/users", params={'search': 'term'})

        assert_that(result, equal_to(expected_response))
        self.session.get.assert_called_once_with(
            expected_url,
            params={'search': 'term'},
            headers={'Accept': 'application/json'},
        )

    def test_post(self):
        expected_url = f"{self.base_url}/users"
        expected_response = self.set_response('post', 201)

        body = {'firstname': 'John'}

        result = self.confd_session.post("/users", body)

        assert_that(result, equal_to(expected_response))
        self.session.post.assert_called_once_with(
            expected_url,
            data=json.dumps(body),
            headers={'Accept': 'application/json', 'Content-Type': 'application/json'},
        )

    def test_put(self):
        expected_url = f"{self.base_url}/users/1"
        self.set_response('put', 204)

        body = {'id': 1, 'firstname': 'John'}

        self.confd_session.put("/users/1", body)

        self.session.put.assert_called_once_with(
            expected_url,
            data=json.dumps(body),
            headers={'Accept': 'application/json', 'Content-Type': 'application/json'},
        )

    def test_delete(self):
        expected_url = f"{self.base_url}/users/1"
        self.set_response('delete', 204)

        self.confd_session.delete("/users/1")

        self.session.delete.assert_called_once_with(
            expected_url, headers={'Accept': 'application/json'}
        )

    def test_given_status_ok_then_no_error_raised(self):
        response = Mock()

        response.status_code = 200
        self.confd_session.check_response(response)

        response.status_code = 201
        self.confd_session.check_response(response)

        response.status_code = 204
        self.confd_session.check_response(response)

        call_count = response.raise_for_status.call_count
        assert_that(call_count, equal_to(0))

    def test_given_status_not_ok_then_error_raised(self):
        response = Mock()
        response.status_code = 400
        response.json.return_value = ["error message"]

        self.confd_session.check_response(response)

        response.raise_for_status.assert_called_once_with()
        assert_that(response.reason, equal_to("error message"))

    def test_given_status_not_ok_when_response_not_checked_then_no_error_raised(self):
        response = Mock()
        response.status_code = 400
        response.json.return_value = ["error message"]

        self.confd_session.check_response(response, False)

        call_count = response.raise_for_status.call_count
        assert_that(call_count, equal_to(0))

    def test_clean_url_strips_extra_slashes(self):
        self.confd_session.base_url = "http://localhost//"
        part = "///users/1"

        url = self.confd_session.clean_url(part)

        assert_that(url, equal_to('http://localhost/users/1'))

----------------------------------------

File: util.py
Please review for update

# Copyright 2023 Accent Communications

from functools import wraps


def url_join(*parts):
    return "/" + "/".join(str(p) for p in parts)


def extract_id(func):
    @wraps(func)
    def wrapper(self, resource_or_id, *args, **kwargs):
        if isinstance(resource_or_id, dict):
            if 'id' in resource_or_id:
                resource_id = resource_or_id['id']
            elif 'uuid' in resource_or_id:
                resource_id = resource_or_id['uuid']
            else:
                raise KeyError('no id or uuid key found')
        else:
            resource_id = resource_or_id
        return func(self, resource_id, *args, **kwargs)

    return wrapper


def extract_name(pass_original=False):
    def decorator(func):
        @wraps(func)
        def wrapper(self, resource_or_id, *args, **kwargs):
            if isinstance(resource_or_id, dict):
                if 'name' in resource_or_id:
                    resource_id = resource_or_id['name']
                else:
                    raise KeyError('no "name" key found')
            else:
                resource_id = resource_or_id
            if pass_original:
                return func(self, resource_id, resource_or_id, *args, **kwargs)
            else:
                return func(self, resource_id, *args, **kwargs)

        return wrapper

    return decorator

----------------------------------------

