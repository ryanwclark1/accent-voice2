File: __init__.py
Please review for update

# Copyright 2023 Accent Communications  (see AUTHORS file)

from accent_provd_client.client import Client

__all__ = [
    'Client',
]

----------------------------------------

File: client.py
Please review for update

# Copyright 2023 Accent Communications

from accent_lib_rest_client.client import BaseClient


class Client(BaseClient):
    namespace = 'accent_provd_client.commands'

    def __init__(self, host, port=443, prefix='/api/provd', version='0.2', **kwargs):
        super().__init__(host=host, port=port, prefix=prefix, version=version, **kwargs)

----------------------------------------

File: command.py
Please review for update

# Copyright 2023 Accent Communications

import json

from requests.exceptions import HTTPError
from accent_lib_rest_client.command import RESTCommand

from .exceptions import ProvdError, ProvdServiceUnavailable


class ProvdCommand(RESTCommand):
    @staticmethod
    def raise_from_response(response):
        if response.status_code == 503:
            raise ProvdServiceUnavailable(response)

        try:
            RESTCommand.raise_from_response(response)
        except HTTPError as e:
            raise ProvdError(e, response=response)

    @staticmethod
    def _build_list_params(
        search=None,
        fields=None,
        offset=0,
        limit=0,
        order=None,
        direction=None,
        *args,
        **kwargs,
    ):
        params = {}
        if args:
            params['q'] = json.dumps(args[0])
        if search:
            params['q'] = json.dumps(search)
        if fields:
            params['fields'] = ','.join(fields)
        if offset:
            params['skip'] = offset
        if limit:
            params['limit'] = limit
        if order and direction:
            params['sort'] = order
            valid_directions = ('asc', 'desc')
            if direction not in valid_directions:
                raise ValueError(f'Invalid direction {direction}')
            params['sort_ord'] = direction.upper()
        if kwargs:
            params.update(kwargs)
        return params

----------------------------------------

File: commands/__init__.py
Please review for update


----------------------------------------

File: commands/configs.py
Please review for update

# Copyright 2023 Accent Communications

import base64
import json

from accent_provd_client.command import ProvdCommand


class ConfigsCommand(ProvdCommand):
    resource = 'cfg_mgr'
    _headers = {'Content-Type': 'application/vnd.accent.provd+json'}

    def list_registrar(self, **params):
        url = f'{self.base_url}/configs'
        params.update(self._prepare_query({'X_type': 'registrar'}))
        r = self.session.get(url, params=params)
        self.raise_from_response(r)
        return r.json()

    def list_device(self, **params):
        url = f'{self.base_url}/configs'
        params.update(self._prepare_query({'X_type': 'device'}))
        r = self.session.get(url, params=params)
        self.raise_from_response(r)
        return r.json()

    def list(self, *args, **kwargs):
        url = f'{self.base_url}/configs'
        r = self.session.get(url, params=self._build_list_params(*args, **kwargs))
        self.raise_from_response(r)
        return r.json()

    def get_all(self):
        url = f'{self.base_url}/configs'
        r = self.session.get(url)
        self.raise_from_response(r)
        return r.json()

    def get(self, id_):
        url = f'{self.base_url}/configs/{id_}'
        r = self.session.get(url, headers=self._headers)
        self.raise_from_response(r)
        return r.json()['config']

    def get_raw(self, id_):
        url = f'{self.base_url}/configs/{id_}/raw'
        r = self.session.get(url, headers=self._headers)
        self.raise_from_response(r)
        return r.json()['raw_config']

    def create(self, data):
        url = f'{self.base_url}/configs'
        r = self.session.post(url, json={'config': data}, headers=self._headers)
        self.raise_from_response(r)
        return r.json()

    def update(self, data):
        id_ = data['id']
        url = f'{self.base_url}/configs/{id_}'
        r = self.session.put(url, json={'config': data}, headers=self._headers)
        self.raise_from_response(r)

    def delete(self, id_):
        url = f'{self.base_url}/configs/{id_}'
        r = self.session.delete(url)
        self.raise_from_response(r)

    def autocreate(self):
        url = f'{self.base_url}/autocreate'
        r = self.session.post(url, json={}, headers=self._headers)
        self.raise_from_response(r)
        return r.json()

    def _prepare_query(self, query):
        query = base64.b64encode(json.dumps(query).encode('utf-8'))
        return {'q64': query}

----------------------------------------

File: commands/devices.py
Please review for update

# Copyright 2023 Accent Communications

from accent_provd_client.command import ProvdCommand
from accent_provd_client.operation import OperationInProgress


class DevicesCommand(ProvdCommand):
    resource = 'dev_mgr'
    _headers = {'Content-Type': 'application/vnd.accent.provd+json'}

    def _build_headers(self, kwargs):
        headers = {}
        # The requests session will use self.tenant_uuid by default
        tenant_uuid = kwargs.pop('tenant_uuid', None)
        if tenant_uuid:
            headers['Accent-Tenant'] = tenant_uuid
        return headers

    def _build_headers_with_global_headers(self, kwargs):
        headers = dict(self._headers)
        headers.update(self._build_headers(kwargs))
        return headers

    def get(self, device_id, **kwargs):
        url = f'{self.base_url}/devices/{device_id}'
        r = self.session.get(url, headers=self._build_headers(kwargs), params=kwargs)
        self.raise_from_response(r)
        return r.json()['device']

    def list(self, *args, **kwargs):
        url = f'{self.base_url}/devices'
        r = self.session.get(
            url,
            headers=self._build_headers(kwargs),
            params=self._build_list_params(*args, **kwargs),
        )
        self.raise_from_response(r)
        return r.json()

    def update(self, data, **kwargs):
        device_id = data.get('id')
        url = f'{self.base_url}/devices/{device_id}'
        data = {'device': data}
        r = self.session.put(
            url,
            json=data,
            headers=self._build_headers_with_global_headers(kwargs),
            params=kwargs,
        )
        self.raise_from_response(r)

    def create(self, data, **kwargs):
        url = f'{self.base_url}/devices'
        data = {'device': data}
        r = self.session.post(
            url,
            json=data,
            headers=self._build_headers_with_global_headers(kwargs),
            params=kwargs,
        )
        self.raise_from_response(r)
        return r.json()

    def delete(self, id_, **kwargs):
        url = f'{self.base_url}/devices/{id_}'
        r = self.session.delete(
            url, headers=self._build_headers_with_global_headers(kwargs), params=kwargs
        )
        self.raise_from_response(r)

    def synchronize(self, id_, **kwargs):
        url = f'{self.base_url}/synchronize'
        data = {'id': id_}
        r = self.session.post(
            url,
            json=data,
            headers=self._build_headers_with_global_headers(kwargs),
            params=kwargs,
        )
        self.raise_from_response(r)
        return OperationInProgress(self, r.headers['Location'])

    def reconfigure(self, id_, **kwargs):
        url = f'{self.base_url}/reconfigure'
        data = {'id': id_}
        r = self.session.post(
            url,
            json=data,
            headers=self._build_headers_with_global_headers(kwargs),
            params=kwargs,
        )
        self.raise_from_response(r)

    def create_from_dhcp(self, data, **kwargs):
        url = f'{self.base_url}/dhcpinfo'
        r = self.session.post(
            url,
            json={'dhcp_info': data},
            headers=self._build_headers_with_global_headers(kwargs),
            params=kwargs,
        )
        self.raise_from_response(r)

----------------------------------------

File: commands/params.py
Please review for update

# Copyright 2023 Accent Communications

from accent_provd_client.command import ProvdCommand


class ParamsCommand(ProvdCommand):
    resource = 'configure'
    _headers = {'Content-Type': 'application/vnd.accent.provd+json'}

    def list(self):
        url = f'{self.base_url}'
        r = self.session.get(url)
        self.raise_from_response(r)
        return r.json()

    def get(self, param, tenant_uuid=None, **kwargs):
        url = f'{self.base_url}/{param}'
        headers = self._get_headers(tenant_uuid=tenant_uuid)
        r = self.session.get(url, headers=headers)
        self.raise_from_response(r)
        return r.json()['param']

    def update(self, param, value, tenant_uuid=None, **kwargs):
        url = f'{self.base_url}/{param}'
        data = {'param': {'value': value}}
        headers = self._get_headers(tenant_uuid=tenant_uuid)
        r = self.session.put(url, json=data, headers=headers)
        self.raise_from_response(r)

    def delete(self, param):
        self.update(param, None)

----------------------------------------

File: commands/plugins.py
Please review for update

# Copyright 2023 Accent Communications

from accent_provd_client.command import ProvdCommand
from accent_provd_client.operation import OperationInProgress


class PluginsCommand(ProvdCommand):
    resource = 'pg_mgr'
    _headers = {'Content-Type': 'application/vnd.accent.provd+json'}

    def update(self):
        url = f'{self.base_url}/install/update'
        r = self.session.post(url, json={}, headers=self._headers)
        self.raise_from_response(r)
        return OperationInProgress(self, r.headers['Location'])

    def get(self, id_):
        url = f'{self.base_url}/plugins/{id_}/info'
        r = self.session.get(url)
        self.raise_from_response(r)
        return r.json()['plugin_info']

    def upgrade(self, id_):
        url = f'{self.base_url}/install/upgrade'
        r = self.session.post(url, json={'id': id_}, headers=self._headers)
        self.raise_from_response(r)
        return OperationInProgress(self, r.headers['Location'])

    def install(self, id_):
        url = f'{self.base_url}/install/install'
        r = self.session.post(url, json={'id': id_}, headers=self._headers)
        self.raise_from_response(r)
        return OperationInProgress(self, r.headers['Location'])

    def uninstall(self, id_):
        url = f'{self.base_url}/install/uninstall'
        r = self.session.post(url, json={'id': id_}, headers=self._headers)
        self.raise_from_response(r)

    def list(self, **params):
        url = f'{self.base_url}/plugins'
        r = self.session.get(url, params=params)
        self.raise_from_response(r)
        return r.json()

    def list_installed(self, **params):
        url = f'{self.base_url}/install/installed'
        r = self.session.get(url, params=params)
        self.raise_from_response(r)
        return r.json()

    def list_installable(self, **params):
        url = f'{self.base_url}/install/installable'
        r = self.session.get(url, params=params)
        self.raise_from_response(r)
        return r.json()

    def get_packages_installed(self, plugin, **params):
        url = f'{self.base_url}/plugins/{plugin}/install/installed'
        r = self.session.get(url, params=params)
        self.raise_from_response(r)
        return r.json()

    def get_packages_installable(self, plugin, **params):
        url = f'{self.base_url}/plugins/{plugin}/install/installable'
        r = self.session.get(url, params=params)
        self.raise_from_response(r)
        return r.json()

    def install_package(self, plugin, package):
        url = f'{self.base_url}/plugins/{plugin}/install/install'
        r = self.session.post(url, json={'id': package}, headers=self._headers)
        self.raise_from_response(r)
        return OperationInProgress(self, r.headers['Location'])

    def uninstall_package(self, plugin, package):
        url = f'{self.base_url}/plugins/{plugin}/install/uninstall'
        r = self.session.post(url, json={'id': package}, headers=self._headers)
        self.raise_from_response(r)

    def upgrade_package(self, plugin, package):
        url = f'{self.base_url}/plugins/{plugin}/install/upgrade'
        r = self.session.post(url, json={'id': package}, headers=self._headers)
        self.raise_from_response(r)
        return OperationInProgress(self, r.headers['Location'])

----------------------------------------

File: commands/status.py
Please review for update

# Copyright 2023 Accent Communications

from accent_provd_client.command import ProvdCommand


class StatusCommand(ProvdCommand):
    resource = 'status'
    _headers = {'Content-Type': 'application/vnd.accent.provd+json'}

    def get(self):
        r = self.session.get(self.base_url, headers=self._headers)
        self.raise_from_response(r)
        return r.json()

----------------------------------------

File: exceptions.py
Please review for update

# Copyright 2023 Accent Communications

from requests import HTTPError


class ProvdError(HTTPError):
    def __init__(self, *args, **kwargs):
        response = kwargs.get('response', None)
        self.status_code = getattr(response, 'status_code', None)
        super().__init__(*args, **kwargs)


class ProvdServiceUnavailable(Exception):
    pass


class InvalidProvdError(Exception):
    pass

----------------------------------------

File: operation.py
Please review for update

# Copyright 2023 Accent Communications

import re

OIP_WAITING = 'waiting'
OIP_PROGRESS = 'progress'
OIP_SUCCESS = 'success'
OIP_FAIL = 'fail'

_PARSE_OIP_REGEX = re.compile(r'^(?:(\w+)\|)?(\w+)(?:;(\d+)(?:/(\d+))?)?')


class BaseOperation:
    def __init__(
        self, label=None, state=OIP_WAITING, current=None, end=None, sub_oips=None
    ):
        self.label = label
        self.state = state
        self.current = current
        self.end = end
        self.sub_oips = sub_oips or []

    def __str__(self):
        status = f'{self.label}: {self.state}'
        if self.current and self.end:
            status += f' ({self.current}/{self.end})'

        if self.sub_oips:
            for sub_oip in self.sub_oips:
                status += f'\n  {sub_oip}'

        return status


class OperationInProgress(BaseOperation):
    def __init__(self, command, location, delete_on_exit=True):
        super().__init__()
        self._command = command
        self.location = location
        fixed_location = self._fix_location_url(location)
        self._url = f'{self._command.base_url}/{fixed_location}'
        self._delete_on_exit = delete_on_exit

        self.update()

    def __enter__(self):
        return self

    def __exit__(self, type, value, traceback):
        if self._delete_on_exit:
            self.delete()

    @property
    def location(self):
        return self._location

    @location.setter
    def location(self, value):
        self._location = value

    def update(self):
        r = self._command.session.get(self._url)
        self._command.raise_from_response(r)
        base_operation = parse_operation(r.json()['status'])
        self.label = base_operation.label
        self.state = base_operation.state
        self.current = base_operation.current
        self.end = base_operation.end
        self.sub_oips = base_operation.sub_oips

    def delete(self):
        r = self._command.session.delete(self._url)
        self._command.raise_from_response(r)

    @staticmethod
    def _fix_location_url(location):
        location_parts = location.split('/')
        return '/'.join(
            location_parts[3:]
        )  # We do not want /provd/{pg,dev,cfg}_mgr/ prefix


def parse_operation(operation_string):
    m = _PARSE_OIP_REGEX.search(operation_string)
    if not m:
        raise ValueError(f'Invalid progress string: {operation_string}')
    else:
        label, state, raw_current, raw_end = m.groups()
        raw_sub_oips = operation_string[m.end() :]
        current = raw_current if raw_current is None else int(raw_current)
        end = raw_end if raw_end is None else int(raw_end)
        sub_oips = [
            parse_operation(sub_oip_string)
            for sub_oip_string in _split_top_parentheses(raw_sub_oips)
        ]
        return BaseOperation(label, state, current, end, sub_oips)


def _split_top_parentheses(str_):
    idx = 0
    length = len(str_)
    result = []
    while idx < length:
        if str_[idx] != '(':
            raise ValueError(f'invalid character: {str_[idx]}')
        start_idx = idx
        idx += 1
        count = 1
        while count:
            if idx >= length:
                raise ValueError(f'unbalanced number of parentheses: {str_}')
            c = str_[idx]
            if c == '(':
                count += 1
            elif c == ')':
                count -= 1
            idx += 1
        end_idx = idx
        result.append(str_[start_idx + 1 : end_idx - 1])
    return result

----------------------------------------

File: tests/__init__.py
Please review for update


----------------------------------------

File: tests/test_command.py
Please review for update

# Copyright 2023 Accent Communications

from unittest import TestCase
from unittest.mock import Mock, patch

from hamcrest import assert_that, calling, raises
from requests.exceptions import HTTPError

from ..command import ProvdCommand
from ..exceptions import ProvdError, ProvdServiceUnavailable


class TestProvdCommand(TestCase):
    @patch('accent_provd_client.command.RESTCommand.raise_from_response')
    def test_raise_from_response_no_error(self, parent_raise):
        response = Mock()
        ProvdCommand.raise_from_response(response)

        parent_raise.assert_called_once_with(response)

    def test_raise_from_response_503(self):
        response = Mock(status_code=503)

        assert_that(
            calling(ProvdCommand.raise_from_response).with_args(response),
            raises(ProvdServiceUnavailable),
        )

    def test_raise_from_response_default_error(self):
        response = Mock()
        response.raise_for_status.side_effect = HTTPError('Error')

        assert_that(
            calling(ProvdCommand.raise_from_response).with_args(response),
            raises(ProvdError),
        )
        response.raise_for_status.assert_called_once()

----------------------------------------

File: tests/test_operation.py
Please review for update

# Copyright 2023 Accent Communications

from unittest import TestCase

from hamcrest import assert_that, empty, equal_to, has_length, is_

from accent_provd_client.operation import parse_operation


class TestParseOperation(TestCase):
    def test_state(self):
        oip = parse_operation('state')
        assert_that(oip.label, equal_to(None))
        assert_that(oip.state, equal_to('state'))
        assert_that(oip.current, equal_to(None))
        assert_that(oip.end, equal_to(None))
        assert_that(oip.sub_oips, is_(empty()))

    def test_state_label(self):
        oip = parse_operation('label|state')
        assert_that(oip.label, equal_to('label'))
        assert_that(oip.state, equal_to('state'))
        assert_that(oip.current, equal_to(None))
        assert_that(oip.end, equal_to(None))
        assert_that(oip.sub_oips, is_(empty()))

    def test_state_current(self):
        oip = parse_operation('state;0')
        assert_that(oip.label, equal_to(None))
        assert_that(oip.state, equal_to('state'))
        assert_that(oip.current, equal_to(0))
        assert_that(oip.end, equal_to(None))
        assert_that(oip.sub_oips, is_(empty()))

    def test_state_current_end(self):
        oip = parse_operation('state;0/1')
        assert_that(oip.label, equal_to(None))
        assert_that(oip.state, equal_to('state'))
        assert_that(oip.current, equal_to(0))
        assert_that(oip.end, equal_to(1))
        assert_that(oip.sub_oips, is_(empty()))

    def test_state_current_end_label(self):
        oip = parse_operation('label|state;0/1')
        assert_that(oip.label, equal_to('label'))
        assert_that(oip.state, equal_to('state'))
        assert_that(oip.current, equal_to(0))
        assert_that(oip.end, equal_to(1))
        assert_that(oip.sub_oips, is_(empty()))

    def test_state_sub_state(self):
        oip1 = parse_operation('state1(state11)')
        assert_that(oip1.label, equal_to(None))
        assert_that(oip1.state, equal_to('state1'))
        assert_that(oip1.current, equal_to(None))
        assert_that(oip1.end, equal_to(None))
        assert_that(oip1.sub_oips, has_length(1))

        oip11 = oip1.sub_oips[0]
        assert_that(oip11.label, equal_to(None))
        assert_that(oip11.state, equal_to('state11'))
        assert_that(oip11.current, equal_to(None))
        assert_that(oip11.end, equal_to(None))
        assert_that(oip11.sub_oips, is_(empty()))

    def test_state_two_sub_state(self):
        oip1 = parse_operation('state1(state11)(state12)')
        assert_that(oip1.label, equal_to(None))
        assert_that(oip1.state, equal_to('state1'))
        assert_that(oip1.current, equal_to(None))
        assert_that(oip1.end, equal_to(None))
        assert_that(oip1.sub_oips, has_length(2))

        oip11 = oip1.sub_oips[0]
        assert_that(oip11.label, equal_to(None))
        assert_that(oip11.state, equal_to('state11'))
        assert_that(oip11.current, equal_to(None))
        assert_that(oip11.end, equal_to(None))
        assert_that(oip11.sub_oips, has_length(0))

        oip12 = oip1.sub_oips[1]
        assert_that(oip12.label, equal_to(None))
        assert_that(oip12.state, equal_to('state12'))
        assert_that(oip12.current, equal_to(None))
        assert_that(oip12.end, equal_to(None))
        assert_that(oip12.sub_oips, has_length(0))

    def test_complex(self):
        oip1 = parse_operation(
            'label1|state1;1/1(label11|state11;11/11(label111|state111;111/111))(label12|state12;12/12)'  # noqa
        )

        assert_that(oip1.label, equal_to('label1'))
        assert_that(oip1.state, equal_to('state1'))
        assert_that(oip1.current, equal_to(1))
        assert_that(oip1.end, equal_to(1))
        assert_that(oip1.sub_oips, has_length(2))

        oip11 = oip1.sub_oips[0]
        assert_that(oip11.label, equal_to('label11'))
        assert_that(oip11.state, equal_to('state11'))
        assert_that(oip11.current, equal_to(11))
        assert_that(oip11.end, equal_to(11))
        assert_that(oip11.sub_oips, has_length(1))

        oip111 = oip11.sub_oips[0]
        assert_that(oip111.label, equal_to('label111'))
        assert_that(oip111.state, equal_to('state111'))
        assert_that(oip111.current, equal_to(111))
        assert_that(oip111.end, equal_to(111))
        assert_that(oip111.sub_oips, is_(empty()))

        oip12 = oip1.sub_oips[1]
        assert_that(oip12.label, equal_to('label12'))
        assert_that(oip12.state, equal_to('state12'))
        assert_that(oip12.current, equal_to(12))
        assert_that(oip12.end, equal_to(12))
        assert_that(oip111.sub_oips, is_(empty()))

----------------------------------------

