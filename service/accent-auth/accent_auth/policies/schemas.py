# accent_auth/policies/schemas.py

from typing import List, Optional

from pydantic import BaseModel, Field, validator

from accent_auth.models import CustomBaseModel


class PolicyBase(BaseModel):
    name: str = Field(..., max_length=80)
    slug: str | None = None  # Slug is optional, can be autogenerated
    description: str | None = None
    acl: List[str] = []
    shared: bool = False


class PolicyCreate(PolicyBase):
    tenant_uuid: str

    class Config:
        json_schema_extra = {
            "example": {
                "name": "My Policy",
                "slug": "my-policy",  # Optional
                "description": "A description of the policy",
                "acl": ["resource:read", "resource:write"],
                "tenant_uuid": "some-tenant-uuid",
                "shared": False,
            }
        }


class PolicyUpdate(PolicyBase):
    name: str | None = None  # Allow updating the name
    acl: List[str] | None = None  # Allow updating the ACL.
    description: str | None = None
    shared: bool | None = None


class Policy(PolicyBase):
    """For returning policy information."""

    uuid: str
    tenant_uuid: str
    config_managed: bool
    read_only: bool  # Added in previous step.
    model_config = {"from_attributes": True}


# Added Access
class Access(BaseModel):
    id_: int = Field(..., alias="id")  # Needed for the database model
    access: str

    model_config = {"from_attributes": True}


class PolicyList(BaseModel):
    total: int
    filtered: int
    items: list[Policy]
